{"ast":null,"code":"import axios from \"axios\";\nimport { data } from \"react-router-dom\";\n\n// Function to get headers with Authorization and User ID\nconst getHeader = () => {\n  const token = localStorage.getItem(\"token\");\n  console.log(token);\n  if (!token) {\n    alert(\"Authentication token is missing. Please log in again.\");\n    throw new Error(\"Token not found\");\n  }\n  return {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${token}`\n  };\n};\n\n// Function to submit career information (both POST and PUT)\nconst careerInformationForm = async (formData, method = \"POST\") => {\n  try {\n    const url = \"http://localhost:8080/api/career\";\n    const headers = getHeader();\n    if (method === \"POST\") {\n      // Create a new career record\n      const response = await axios.post(url, formData, {\n        headers\n      });\n      return response.data;\n    } else if (method === \"PUT\") {\n      // Update an existing career record\n      const response = await axios.put(`${url}/update/${formData.id}`, formData, {\n        headers\n      });\n      return response.data;\n    }\n  } catch (error) {\n    console.error(\"Error submitting Career Information :\", error);\n    throw new Error(\"Error submitting Career Information Form\");\n  }\n};\nconst deleteCareerInformation = async id => {\n  try {\n    const url = `http://localhost:8080/api/career/${id}`;\n    const headers = getHeader(); // Ensure you send the token in the request\n\n    const response = await axios.delete(url, {\n      headers\n    }); // Make DELETE request\n    return response.data; // Assuming the backend sends a success message or status\n  } catch (error) {\n    console.error(\"Error deleting career information:\", error);\n    throw new Error(\"Error deleting Career Information\");\n  }\n};\nconst fetchCareerData = async userId => {\n  try {\n    const response = await axios.get(`http://localhost:8080/api/career/user/${userId}`);\n    return response;\n  } catch (error) {\n    console.error(\"Error fetching career data:\", error);\n    throw error;\n  }\n};\n\n// Function to submit education information (both POST and PUT)\nconst educationInformationForm = async (formData, method = \"POST\") => {\n  try {\n    const url = \"http://localhost:8080/api/education\";\n    const headers = getHeader();\n    if (method === \"POST\") {\n      // Create a new career record\n      const response = await axios.post(url, formData);\n      return response.data;\n    } else if (method === \"PUT\") {\n      // Update an existing career record\n      const response = await axios.put(`${url}/update/${formData.id}`, formData, {\n        headers\n      });\n      return response.data;\n    }\n  } catch (error) {\n    console.error(\"Error submitting Education Information :\", error);\n    throw new Error(\"Error submitting Education Information Form\");\n  }\n};\n\n// Function to fetch education data\nconst fetchEducationData = async userId => {\n  try {\n    const response = await axios.get(`http://localhost:8080/api/education/user/${userId}`);\n    console.log(\"Education data received:\", response.data);\n    return response.data ? response : {\n      data: []\n    };\n  } catch (error) {\n    console.error(\"Error fetching career data:\", error);\n    throw {\n      data: []\n    };\n  }\n};\nconst deleteEducationInformation = async id => {\n  try {\n    const url = `http://localhost:8080/api/education/${id}`;\n    const headers = getHeader(); // Ensure you send the token in the request\n\n    const response = await axios.delete(url, {\n      headers\n    }); // Make DELETE request\n    return response.data; // Assuming the backend sends a success message or status\n  } catch (error) {\n    console.error(\"Error deleting Education information:\", error);\n    throw new Error(\"Error deleting Education Information\");\n  }\n};\n\n// // Function to submit education information (both POST and PUT)\n// const physicalAttributesForm = async (formData, method = \"POST\") => {\n//   try {\n//     const url = \"http://localhost:8080/api/physical-attributes\";\n//     const headers = getHeader();\n\n//     if (method === \"POST\") {\n//       // Create a new career record\n//       const response = await axios.post(url, formData );\n//       return response.data;\n//     } else if (method === \"PUT\") {\n//       // Update an existing career record\n//       const response = await axios.put(`${url}/${formData.id}`, formData, {\n//         headers,\n//       });\n//       return response.data;\n//     }\n//   } catch (error) {\n//     console.error(\"Error submitting Education Information :\", error);\n//     throw new Error(\"Error submitting Education Information Form\");\n//   }\n// };\n\n// Function to submit a new physical attributes record (POST)\nconst postPhysicalAttributes = async formData => {\n  try {\n    const url = \"http://localhost:8080/api/physical-attributes\";\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\n\n    const response = await axios.post(url, formData, {\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error posting physical attributes:\", error);\n    throw new Error(\"Error posting physical attributes.\");\n  }\n};\n\n// Function to update an existing physical attributes record (PUT)\nconst updatePhysicalAttributes = async (id, formData) => {\n  try {\n    const url = `http://localhost:8080/api/physical-attributes/${id}`;\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\n\n    const response = await axios.put(url, formData, {\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating physical attributes:\", error);\n    throw new Error(\"Error updating physical attributes.\");\n  }\n};\n\n// Function to fetch education data\nconst fetchPhysicalAttributesData = async userId => {\n  try {\n    const response = await axios.get(`http://localhost:8080/api/physical-attributes/user/${userId}`);\n    console.log(\"Fetched Physical Attributes Data:\", response.data); // Debugging\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching career data:\", error);\n    throw error;\n  }\n};\nconst deletePhysicalAttributes = async id => {\n  try {\n    const url = `http://localhost:8080/api/physical-attributes/${id}`;\n    const headers = getHeader(); // Ensure you send the token in the request\n\n    const response = await axios.delete(url, {\n      headers\n    }); // Make DELETE request\n    return response.data; // Assuming the backend sends a success message or status\n  } catch (error) {\n    console.error(\"Error deleting Education information:\", error);\n    throw new Error(\"Error deleting Education Information\");\n  }\n};\n\n// Function to submit a new physical attributes record (POST)\nconst postFamilyInformation = async formData => {\n  try {\n    const url = \"http://localhost:8080/api/family-information\";\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\n\n    const response = await axios.post(url, formData, {\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error posting Family Information:\", error);\n    throw new Error(\"Error posting Family Information.\");\n  }\n};\n\n// Function to update an existing physical attributes record (PUT)\nconst updateFamilyInformation = async (id, formData) => {\n  try {\n    const url = `http://localhost:8080/api/family-information/${id}`;\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\n\n    const response = await axios.put(url, formData, {\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating Family Information:\", error);\n    throw new Error(\"Error updating Family Information.\");\n  }\n};\n\n// Function to fetch education data\nconst fetchFamilyInformation = async userId => {\n  try {\n    const response = await axios.get(`http://localhost:8080/api/family-information/user/${userId}`);\n    console.log(\"Fetched Family Information Data:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching Family Information:\", error);\n    throw error;\n  }\n};\n\n// Function to submit a new physical attributes record (POST)\nconst postPartnerExpectations = async formData => {\n  try {\n    const url = \"http://localhost:8080/api/partner-expectations\";\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\n\n    const response = await axios.post(url, formData, {\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error posting Partner Expectations :\", error);\n    throw new Error(\"Error posting Partner Expectations.\");\n  }\n};\n\n// Function to update an existing physical attributes record (PUT)\nconst updatePartnerExpectations = async (id, formData) => {\n  try {\n    const url = `http://localhost:8080/api/partner-expectations/${id}`;\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\n\n    const response = await axios.put(url, formData, {\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating Partner Expectations :\", error);\n    throw new Error(\"Error updating Partner Expectations .\");\n  }\n};\n\n// Function to fetch education data\nconst fetchPartnerExpectations = async userId => {\n  try {\n    const response = await axios.get(`http://localhost:8080/api/partner-expectations/user/${userId}`);\n    return response;\n  } catch (error) {\n    console.error(\"Error fetching Partner Expectations :\", error);\n    throw error;\n  }\n};\n\n// const getBasicInformationByUserId = async (userId) => {\n//   try {\n//     const response = await axios.get(`http://localhost:8080/api/basic-information/${userId}`);\n//     return response.data;\n//   } catch (error) {\n//     if (error.response && error.response.status === 404) {\n//       console.warn(\"No basic information found for userId:\", userId);\n//       return null;  // Handle gracefully\n//     }\n//     console.error(\"Error fetching existing basic information:\", error);\n//     throw error;\n//   }\n// };\n// const getBasicInformationByUserId = async (userId) => {\n//   try {\n//     const response = await axios.get(`http://localhost:8080/api/basic-information/user/${userId}`);\n//     return response.data;  // Ensure the response is in the expected format\n//   } catch (error) {\n//     if (error.response && error.response.status === 404) {\n//       console.warn(\"No basic information found for userId:\", userId);\n//       return null;\n//     }\n//     console.error(\"Error fetching existing basic information:\", error);\n//     throw error;\n//   }\n// };\n\nconst getBasicInformationByUserId = async userId => {\n  try {\n    const response = await axios.get(`http://localhost:8080/api/basic-information/user/${userId}`);\n    if (response.data && Object.keys(response.data).length > 0) {\n      return response.data; // Ensure response contains meaningful data\n    } else {\n      console.warn(`Basic information is empty or undefined for userId: ${userId}`);\n      return null;\n    }\n  } catch (error) {\n    if (error.response) {\n      // Handle specific HTTP status codes\n      if (error.response.status === 404) {\n        console.warn(`No basic information found for userId: ${userId}`);\n        return null;\n      } else if (error.response.status === 500) {\n        console.error(\"Server error while fetching basic information:\", error.response.data);\n      } else {\n        console.error(`Unexpected error (status ${error.response.status}):`, error.response.data);\n      }\n    } else if (error.request) {\n      // Network-related issue\n      console.error(\"No response received from server:\", error.request);\n    } else {\n      // Unknown error\n      console.error(\"Unexpected error fetching basic information:\", error.message);\n    }\n    return null; // Prevents throwing an unhandled error\n  }\n};\n\n// Function to submit a new physical attributes record (POST)\n// const postBasicInformation = async (formData) => {\n//   try {\n//     const url = \"http://localhost:8080/api/basic-information\";\n//     const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\n\n//     const response = await axios.post(url, formData, { headers });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error posting Basic Information:\", error);\n//     throw new Error(\"Error posting Basic Information.\");\n//   }\n// };\nconst postBasicInformation = async data => {\n  try {\n    const response = await axios.post(\"http://localhost:8080/api/basic-information\", data);\n    return response.data; // Assuming the response contains the newly created data\n  } catch (error) {\n    console.error(\"Error posting basic information:\", error);\n    throw error;\n  }\n};\n\n// Function to update an existing physical attributes record (PUT)\n// const updateBasicInformation = async (id, formData) => {\n//   try {\n//     const url = `http://localhost:8080/api/basic-information/${id}`;\n//     const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\n\n//     const response = await axios.put(url, formData, { headers });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error updating Family Information:\", error);\n//     throw new Error(\"Error updating Family Information.\");\n//   }\n// };\n// const updateBasicInformation = async (id, data) => {\n//   try {\n//     const response = await axios.put(`http://localhost:8080/api/basic-information/${id}`, data);\n//     return response.data; // Assuming the response contains the updated data\n//   } catch (error) {\n//     console.error(\"Error updating basic information:\", error);\n//     throw error;\n//   }\n// };\n\n// ✅ Update (PUT) basic information & refresh UI state\nconst updateBasicInformation = async (id, data, userId, setBasicInfo) => {\n  try {\n    const response = await axios.put(`http://localhost:8080/api/basic-information/${id}`, data);\n\n    // ✅ Immediately update state with the new data\n    setBasicInfo(response.data);\n\n    // ✅ Refetch updated data from backend (ensures sync)\n    const updatedData = await getBasicInformationByUserId(userId);\n    setBasicInfo(updatedData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating basic information:\", error);\n    throw error;\n  }\n};\n\n// Function to fetch education data\n// const fetchBasicInformation = async () => {\n//   try {\n//     const response = await axios.get(\n//       `http://localhost:8080/api/basic-information`\n//     );\n//     return response;\n//   } catch (error) {\n//     console.error(\"Error fetching basic Information:\", error);\n//     throw error;\n//   }\n// };\n\nconst fetchUserInformation = async userId => {\n  try {\n    const response = await axios.get(`http://localhost:8080/users/get-by-id/${userId}`);\n    return response.data; // Return the actual response data\n  } catch (error) {\n    console.error(\"Error fetching User Information:\", error);\n    throw error; // Rethrow the error to propagate it\n  }\n};\n\n// Function to save the interested user to the database\nconst saveInterest = async userProfile => {\n  try {\n    // Log the userProfile to ensure it's being sent correctly\n    console.log(\"Sending user profile to backend:\", userProfile);\n    const response = await axios.post('http://localhost:8080/api/interest', userProfile);\n\n    // Log the response for debugging purposes\n    console.log(\"Response from API:\", response);\n\n    // Check if the response is successful\n    if (response.status === 201 && response.data) {\n      return {\n        success: true,\n        data: response.data\n      };\n    } else {\n      throw new Error(\"Failed to save interest, please try again.\");\n    }\n  } catch (error) {\n    console.error(\"Error saving interest:\", error);\n    return {\n      success: false,\n      message: error.message || \"Unable to save interest.\"\n    };\n  }\n};\n\n// Function to fetch all interest data\nconst fetchAllInterests = async () => {\n  try {\n    const response = await axios.get('http://localhost:8080/api/interest');\n    console.log(\"Fetching all interest data\", response);\n    return response.data; // Return the response data which should be a list of interests\n  } catch (error) {\n    console.error(\"Error fetching all user interests:\", error);\n    throw error;\n  }\n};\n\n// Function to fetch single interest data\nconst fetchUserInterestById = async userId => {\n  try {\n    const response = await axios.get(`http://localhost:8080/api/interest/${userId}`);\n    return response.data; // Return the response data which should be the user's interest\n  } catch (error) {\n    console.error(`Error fetching interest for user ID ${userId}:`, error);\n    throw error;\n  }\n};\n\n// Function to save the interested user to the database\nconst saveIgnored = async userProfile => {\n  try {\n    // Log the userProfile to ensure it's being sent correctly\n    console.log(\"Sending user profile to backend:\", userProfile);\n    const response = await axios.post('http://localhost:8080/api/ignored-profile', userProfile);\n\n    // Log the response for debugging purposes\n    console.log(\"Response from API:\", response);\n\n    // Check if the response is successful\n    if (response.status === 201 && response.data) {\n      return {\n        success: true,\n        data: response.data\n      };\n    } else {\n      throw new Error(\"Failed to save ignored, please try again.\");\n    }\n  } catch (error) {\n    console.error(\"Error saving ignored:\", error);\n    return {\n      success: false,\n      message: error.message || \"Unable to save ignored.\"\n    };\n  }\n};\n\n// Function to fetch all interest data\nconst fetchAllIgnored = async () => {\n  try {\n    const response = await axios.get('http://localhost:8080/api/ignored-profile');\n    console.log(\"Fetching all ignored data\", response);\n    return response.data; // Return the response data which should be a list of interests\n  } catch (error) {\n    console.error(\"Error fetching all user ignored:\", error);\n    throw error;\n  }\n};\n\n// Function to save the interested user to the database\nconst saveShortlist = async userProfile => {\n  try {\n    // Log the userProfile to ensure it's being sent correctly\n    console.log(\"Sending user profile to backend:\", userProfile);\n    const response = await axios.post('http://localhost:8080/api/shortlisted-profile', userProfile);\n\n    // Log the response for debugging purposes\n    console.log(\"Response from API:\", response);\n\n    // Check if the response is successful\n    if (response.status === 201 && response.data) {\n      return {\n        success: true,\n        data: response.data\n      };\n    } else {\n      throw new Error(\"Failed to save shortlisted, please try again.\");\n    }\n  } catch (error) {\n    console.error(\"Error saving shortlisted:\", error);\n    return {\n      success: false,\n      message: error.message || \"Unable to save shortlisted.\"\n    };\n  }\n};\n\n// Function to fetch all interest data\nconst fetchAllShortlisted = async () => {\n  try {\n    const response = await axios.get('http://localhost:8080/api/api/shortlisted-profile');\n    console.log(\"Fetching all shortlisted data\", response);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching all user shortlisted:\", error);\n    throw error;\n  }\n};\n\n// Function to get all users\nconst getAllUsers = async () => {\n  try {\n    const response = await axios.get(`http://localhost:8080/users/get-all`, {\n      headers: getHeader() // Include the header with Authorization\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching all users:\", error);\n    throw error; // Rethrow the error to handle it in the calling function\n  }\n};\nexport { careerInformationForm, fetchCareerData, deleteCareerInformation, educationInformationForm, fetchEducationData, deleteEducationInformation,\n// physicalAttributesForm,\npostPhysicalAttributes, updatePhysicalAttributes, fetchPhysicalAttributesData, deletePhysicalAttributes, postFamilyInformation, updateFamilyInformation, fetchFamilyInformation, postPartnerExpectations, updatePartnerExpectations, fetchPartnerExpectations, getBasicInformationByUserId, postBasicInformation, updateBasicInformation, fetchUserInformation, saveInterest, fetchAllInterests, fetchUserInterestById, saveIgnored, fetchAllIgnored, saveShortlist, fetchAllShortlisted, getAllUsers, getHeader };","map":{"version":3,"names":["axios","data","getHeader","token","localStorage","getItem","console","log","alert","Error","Authorization","careerInformationForm","formData","method","url","headers","response","post","put","id","error","deleteCareerInformation","delete","fetchCareerData","userId","get","educationInformationForm","fetchEducationData","deleteEducationInformation","postPhysicalAttributes","updatePhysicalAttributes","fetchPhysicalAttributesData","deletePhysicalAttributes","postFamilyInformation","updateFamilyInformation","fetchFamilyInformation","postPartnerExpectations","updatePartnerExpectations","fetchPartnerExpectations","getBasicInformationByUserId","Object","keys","length","warn","status","request","message","postBasicInformation","updateBasicInformation","setBasicInfo","updatedData","fetchUserInformation","saveInterest","userProfile","success","fetchAllInterests","fetchUserInterestById","saveIgnored","fetchAllIgnored","saveShortlist","fetchAllShortlisted","getAllUsers"],"sources":["E:/MatriLab-frontend/src/services/ApiService.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { data } from \"react-router-dom\";\r\n\r\n// Function to get headers with Authorization and User ID\r\nconst getHeader = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  console.log(token);\r\n\r\n  if (!token) {\r\n    alert(\"Authentication token is missing. Please log in again.\");\r\n    throw new Error(\"Token not found\");\r\n  }\r\n\r\n  return {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: `Bearer ${token}`,\r\n  };\r\n};\r\n\r\n// Function to submit career information (both POST and PUT)\r\nconst careerInformationForm = async (formData, method = \"POST\") => {\r\n  try {\r\n    const url = \"http://localhost:8080/api/career\";\r\n    const headers = getHeader();\r\n\r\n    if (method === \"POST\") {\r\n      // Create a new career record\r\n      const response = await axios.post(url, formData, { headers });\r\n      return response.data;\r\n    } else if (method === \"PUT\") {\r\n      // Update an existing career record\r\n      const response = await axios.put(`${url}/update/${formData.id}`, formData, {\r\n        headers,\r\n      });\r\n      return response.data;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error submitting Career Information :\", error);\r\n    throw new Error(\"Error submitting Career Information Form\");\r\n  }\r\n};\r\n\r\nconst deleteCareerInformation = async (id) => {\r\n  try {\r\n    const url = `http://localhost:8080/api/career/${id}`;\r\n    const headers = getHeader(); // Ensure you send the token in the request\r\n\r\n    const response = await axios.delete(url, { headers }); // Make DELETE request\r\n    return response.data; // Assuming the backend sends a success message or status\r\n  } catch (error) {\r\n    console.error(\"Error deleting career information:\", error);\r\n    throw new Error(\"Error deleting Career Information\");\r\n  }\r\n};\r\n\r\nconst fetchCareerData = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`http://localhost:8080/api/career/user/${userId}`);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Error fetching career data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to submit education information (both POST and PUT)\r\nconst educationInformationForm = async (formData, method = \"POST\") => {\r\n  try {\r\n    const url = \"http://localhost:8080/api/education\";\r\n    const headers = getHeader();\r\n\r\n    if (method === \"POST\") {\r\n      // Create a new career record\r\n      const response = await axios.post(url, formData);\r\n      return response.data;\r\n    } else if (method === \"PUT\") {\r\n      // Update an existing career record\r\n      const response = await axios.put(`${url}/update/${formData.id}`, formData, {\r\n        headers,\r\n      });\r\n      return response.data;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error submitting Education Information :\", error);\r\n    throw new Error(\"Error submitting Education Information Form\");\r\n  }\r\n};\r\n\r\n// Function to fetch education data\r\nconst fetchEducationData = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`http://localhost:8080/api/education/user/${userId}`);\r\n    console.log(\"Education data received:\", response.data);\r\n\r\n    return response.data ? response : { data: [] };\r\n  } catch (error) {\r\n    console.error(\"Error fetching career data:\", error);\r\n    throw { data: [] };\r\n  }\r\n};\r\n\r\nconst deleteEducationInformation = async (id) => {\r\n  try {\r\n    const url = `http://localhost:8080/api/education/${id}`;\r\n    const headers = getHeader(); // Ensure you send the token in the request\r\n\r\n    const response = await axios.delete(url, { headers }); // Make DELETE request\r\n    return response.data; // Assuming the backend sends a success message or status\r\n  } catch (error) {\r\n    console.error(\"Error deleting Education information:\", error);\r\n    throw new Error(\"Error deleting Education Information\");\r\n  }\r\n};\r\n\r\n// // Function to submit education information (both POST and PUT)\r\n// const physicalAttributesForm = async (formData, method = \"POST\") => {\r\n//   try {\r\n//     const url = \"http://localhost:8080/api/physical-attributes\";\r\n//     const headers = getHeader();\r\n\r\n//     if (method === \"POST\") {\r\n//       // Create a new career record\r\n//       const response = await axios.post(url, formData );\r\n//       return response.data;\r\n//     } else if (method === \"PUT\") {\r\n//       // Update an existing career record\r\n//       const response = await axios.put(`${url}/${formData.id}`, formData, {\r\n//         headers,\r\n//       });\r\n//       return response.data;\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(\"Error submitting Education Information :\", error);\r\n//     throw new Error(\"Error submitting Education Information Form\");\r\n//   }\r\n// };\r\n\r\n// Function to submit a new physical attributes record (POST)\r\nconst postPhysicalAttributes = async (formData) => {\r\n  try {\r\n    const url = \"http://localhost:8080/api/physical-attributes\";\r\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\r\n\r\n    const response = await axios.post(url, formData, { headers });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error posting physical attributes:\", error);\r\n    throw new Error(\"Error posting physical attributes.\");\r\n  }\r\n};\r\n\r\n// Function to update an existing physical attributes record (PUT)\r\nconst updatePhysicalAttributes = async (id, formData) => {\r\n  try {\r\n    const url = `http://localhost:8080/api/physical-attributes/${id}`;\r\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\r\n\r\n    const response = await axios.put(url, formData, { headers });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error updating physical attributes:\", error);\r\n    throw new Error(\"Error updating physical attributes.\");\r\n  }\r\n};\r\n\r\n// Function to fetch education data\r\nconst fetchPhysicalAttributesData = async (userId) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `http://localhost:8080/api/physical-attributes/user/${userId}`\r\n    );\r\n    console.log(\"Fetched Physical Attributes Data:\", response.data); // Debugging\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching career data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst deletePhysicalAttributes = async (id) => {\r\n  try {\r\n    const url = `http://localhost:8080/api/physical-attributes/${id}`;\r\n    const headers = getHeader(); // Ensure you send the token in the request\r\n\r\n    const response = await axios.delete(url, { headers }); // Make DELETE request\r\n    return response.data; // Assuming the backend sends a success message or status\r\n  } catch (error) {\r\n    console.error(\"Error deleting Education information:\", error);\r\n    throw new Error(\"Error deleting Education Information\");\r\n  }\r\n};\r\n\r\n// Function to submit a new physical attributes record (POST)\r\nconst postFamilyInformation = async (formData) => {\r\n  try {\r\n    const url = \"http://localhost:8080/api/family-information\";\r\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\r\n\r\n    const response = await axios.post(url, formData, { headers });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error posting Family Information:\", error);\r\n    throw new Error(\"Error posting Family Information.\");\r\n  }\r\n};\r\n\r\n// Function to update an existing physical attributes record (PUT)\r\nconst updateFamilyInformation = async (id, formData) => {\r\n  try {\r\n    const url = `http://localhost:8080/api/family-information/${id}`;\r\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\r\n\r\n    const response = await axios.put(url, formData, { headers });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error updating Family Information:\", error);\r\n    throw new Error(\"Error updating Family Information.\");\r\n  }\r\n};\r\n\r\n// Function to fetch education data\r\nconst fetchFamilyInformation = async (userId) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `http://localhost:8080/api/family-information/user/${userId}`\r\n    );\r\n    console.log(\"Fetched Family Information Data:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching Family Information:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to submit a new physical attributes record (POST)\r\nconst postPartnerExpectations = async (formData) => {\r\n  try {\r\n    const url = \"http://localhost:8080/api/partner-expectations\";\r\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\r\n\r\n    const response = await axios.post(url, formData, { headers });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error posting Partner Expectations :\", error);\r\n    throw new Error(\"Error posting Partner Expectations.\");\r\n  }\r\n};\r\n\r\n// Function to update an existing physical attributes record (PUT)\r\nconst updatePartnerExpectations = async (id, formData) => {\r\n  try {\r\n    const url = `http://localhost:8080/api/partner-expectations/${id}`;\r\n    const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\r\n\r\n    const response = await axios.put(url, formData, { headers });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error updating Partner Expectations :\", error);\r\n    throw new Error(\"Error updating Partner Expectations .\");\r\n  }\r\n};\r\n\r\n// Function to fetch education data\r\nconst fetchPartnerExpectations = async (userId) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `http://localhost:8080/api/partner-expectations/user/${userId}`\r\n    );\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Error fetching Partner Expectations :\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// const getBasicInformationByUserId = async (userId) => {\r\n//   try {\r\n//     const response = await axios.get(`http://localhost:8080/api/basic-information/${userId}`);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     if (error.response && error.response.status === 404) {\r\n//       console.warn(\"No basic information found for userId:\", userId);\r\n//       return null;  // Handle gracefully\r\n//     }\r\n//     console.error(\"Error fetching existing basic information:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n// const getBasicInformationByUserId = async (userId) => {\r\n//   try {\r\n//     const response = await axios.get(`http://localhost:8080/api/basic-information/user/${userId}`);\r\n//     return response.data;  // Ensure the response is in the expected format\r\n//   } catch (error) {\r\n//     if (error.response && error.response.status === 404) {\r\n//       console.warn(\"No basic information found for userId:\", userId);\r\n//       return null;\r\n//     }\r\n//     console.error(\"Error fetching existing basic information:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\nconst getBasicInformationByUserId = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`http://localhost:8080/api/basic-information/user/${userId}`);\r\n    if (response.data && Object.keys(response.data).length > 0) {\r\n      return response.data; // Ensure response contains meaningful data\r\n    } else {\r\n      console.warn(`Basic information is empty or undefined for userId: ${userId}`);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    if (error.response) {\r\n      // Handle specific HTTP status codes\r\n      if (error.response.status === 404) {\r\n        console.warn(`No basic information found for userId: ${userId}`);\r\n        return null;\r\n      } else if (error.response.status === 500) {\r\n        console.error(\"Server error while fetching basic information:\", error.response.data);\r\n      } else {\r\n        console.error(`Unexpected error (status ${error.response.status}):`, error.response.data);\r\n      }\r\n    } else if (error.request) {\r\n      // Network-related issue\r\n      console.error(\"No response received from server:\", error.request);\r\n    } else {\r\n      // Unknown error\r\n      console.error(\"Unexpected error fetching basic information:\", error.message);\r\n    }\r\n    return null; // Prevents throwing an unhandled error\r\n  }\r\n};\r\n\r\n\r\n\r\n// Function to submit a new physical attributes record (POST)\r\n// const postBasicInformation = async (formData) => {\r\n//   try {\r\n//     const url = \"http://localhost:8080/api/basic-information\";\r\n//     const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\r\n\r\n//     const response = await axios.post(url, formData, { headers });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error posting Basic Information:\", error);\r\n//     throw new Error(\"Error posting Basic Information.\");\r\n//   }\r\n// };\r\nconst postBasicInformation = async (data) => {\r\n  try {\r\n    const response = await axios.post(\"http://localhost:8080/api/basic-information\", data);\r\n    return response.data; // Assuming the response contains the newly created data\r\n  } catch (error) {\r\n    console.error(\"Error posting basic information:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Function to update an existing physical attributes record (PUT)\r\n// const updateBasicInformation = async (id, formData) => {\r\n//   try {\r\n//     const url = `http://localhost:8080/api/basic-information/${id}`;\r\n//     const headers = getHeader(); // Assuming getHeader sets the necessary authorization headers\r\n\r\n//     const response = await axios.put(url, formData, { headers });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error updating Family Information:\", error);\r\n//     throw new Error(\"Error updating Family Information.\");\r\n//   }\r\n// };\r\n// const updateBasicInformation = async (id, data) => {\r\n//   try {\r\n//     const response = await axios.put(`http://localhost:8080/api/basic-information/${id}`, data);\r\n//     return response.data; // Assuming the response contains the updated data\r\n//   } catch (error) {\r\n//     console.error(\"Error updating basic information:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// ✅ Update (PUT) basic information & refresh UI state\r\nconst updateBasicInformation = async (id, data, userId, setBasicInfo) => {\r\n  try {\r\n    const response = await axios.put(`http://localhost:8080/api/basic-information/${id}`, data);\r\n    \r\n    // ✅ Immediately update state with the new data\r\n    setBasicInfo(response.data);\r\n\r\n    // ✅ Refetch updated data from backend (ensures sync)\r\n    const updatedData = await getBasicInformationByUserId(userId);\r\n    setBasicInfo(updatedData); \r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error updating basic information:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to fetch education data\r\n// const fetchBasicInformation = async () => {\r\n//   try {\r\n//     const response = await axios.get(\r\n//       `http://localhost:8080/api/basic-information`\r\n//     );\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching basic Information:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n\r\nconst fetchUserInformation = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`http://localhost:8080/users/get-by-id/${userId}`);\r\n    return response.data;  // Return the actual response data\r\n  } catch (error) {\r\n    console.error(\"Error fetching User Information:\", error);\r\n    throw error;  // Rethrow the error to propagate it\r\n  }\r\n};\r\n\r\n\r\n\r\n// Function to save the interested user to the database\r\nconst saveInterest = async (userProfile) => {\r\n  try {\r\n    // Log the userProfile to ensure it's being sent correctly\r\n    console.log(\"Sending user profile to backend:\", userProfile);\r\n    \r\n    const response = await axios.post('http://localhost:8080/api/interest', userProfile);\r\n    \r\n    // Log the response for debugging purposes\r\n    console.log(\"Response from API:\", response);\r\n\r\n    // Check if the response is successful\r\n    if (response.status === 201 && response.data) {\r\n      return { success: true, data: response.data };\r\n    } else {\r\n      throw new Error(\"Failed to save interest, please try again.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error saving interest:\", error);\r\n    return { success: false, message: error.message || \"Unable to save interest.\" };\r\n  }\r\n};\r\n\r\n\r\n// Function to fetch all interest data\r\nconst fetchAllInterests = async () => {\r\n  try {\r\n    const response = await axios.get('http://localhost:8080/api/interest');\r\n    console.log(\"Fetching all interest data\", response);\r\n    \r\n    return response.data;  // Return the response data which should be a list of interests\r\n  } catch (error) {\r\n    console.error(\"Error fetching all user interests:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Function to fetch single interest data\r\nconst fetchUserInterestById = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`http://localhost:8080/api/interest/${userId}`);\r\n    return response.data;  // Return the response data which should be the user's interest\r\n  } catch (error) {\r\n    console.error(`Error fetching interest for user ID ${userId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to save the interested user to the database\r\nconst saveIgnored = async (userProfile) => {\r\n  try {\r\n    // Log the userProfile to ensure it's being sent correctly\r\n    console.log(\"Sending user profile to backend:\", userProfile);\r\n    \r\n    const response = await axios.post('http://localhost:8080/api/ignored-profile', userProfile);\r\n    \r\n    // Log the response for debugging purposes\r\n    console.log(\"Response from API:\", response);\r\n\r\n    // Check if the response is successful\r\n    if (response.status === 201 && response.data) {\r\n      return { success: true, data: response.data };\r\n    } else {\r\n      throw new Error(\"Failed to save ignored, please try again.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error saving ignored:\", error);\r\n    return { success: false, message: error.message || \"Unable to save ignored.\" };\r\n  }\r\n};\r\n\r\n\r\n// Function to fetch all interest data\r\nconst fetchAllIgnored = async () => {\r\n  try {\r\n    const response = await axios.get('http://localhost:8080/api/ignored-profile');\r\n    console.log(\"Fetching all ignored data\", response);\r\n    \r\n    return response.data;  // Return the response data which should be a list of interests\r\n  } catch (error) {\r\n    console.error(\"Error fetching all user ignored:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Function to save the interested user to the database\r\nconst saveShortlist = async (userProfile) => {\r\n  try {\r\n    // Log the userProfile to ensure it's being sent correctly\r\n    console.log(\"Sending user profile to backend:\", userProfile);\r\n    \r\n    const response = await axios.post('http://localhost:8080/api/shortlisted-profile', userProfile);\r\n    \r\n    // Log the response for debugging purposes\r\n    console.log(\"Response from API:\", response);\r\n\r\n    // Check if the response is successful\r\n    if (response.status === 201 && response.data) {\r\n      return { success: true, data: response.data };\r\n    } else {\r\n      throw new Error(\"Failed to save shortlisted, please try again.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error saving shortlisted:\", error);\r\n    return { success: false, message: error.message || \"Unable to save shortlisted.\" };\r\n  }\r\n};\r\n\r\n\r\n// Function to fetch all interest data\r\nconst fetchAllShortlisted = async () => {\r\n  try {\r\n    const response = await axios.get('http://localhost:8080/api/api/shortlisted-profile');\r\n    console.log(\"Fetching all shortlisted data\", response);\r\n    \r\n    return response.data;  \r\n  } catch (error) {\r\n    console.error(\"Error fetching all user shortlisted:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Function to get all users\r\nconst getAllUsers = async () => {\r\n  try {\r\n    const response = await axios.get(`http://localhost:8080/users/get-all`, {\r\n      headers: getHeader(), // Include the header with Authorization\r\n    });\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching all users:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n\r\nexport {\r\n  careerInformationForm,\r\n  fetchCareerData,\r\n  deleteCareerInformation,\r\n  educationInformationForm,\r\n  fetchEducationData,\r\n  deleteEducationInformation,\r\n  // physicalAttributesForm,\r\n  postPhysicalAttributes,\r\n  updatePhysicalAttributes,\r\n  fetchPhysicalAttributesData,\r\n  deletePhysicalAttributes,\r\n  postFamilyInformation,\r\n  updateFamilyInformation,\r\n  fetchFamilyInformation,\r\n  postPartnerExpectations,\r\n  updatePartnerExpectations,\r\n  fetchPartnerExpectations,\r\n  getBasicInformationByUserId,\r\n  postBasicInformation,\r\n  updateBasicInformation,\r\n  fetchUserInformation,\r\n  saveInterest,\r\n  fetchAllInterests,\r\n  fetchUserInterestById,\r\n  saveIgnored,\r\n  fetchAllIgnored,\r\n  saveShortlist,\r\n  fetchAllShortlisted,\r\n  getAllUsers,\r\n  getHeader,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}