{"ast":null,"code":"var _jsxFileName = \"E:\\\\MatriLab-frontend\\\\src\\\\screens\\\\user\\\\CareerInformation.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../../styles/user/dashboard.css\";\n// import \"../../styles/styles.css\";\n// import \"../../styles/user/profileSetting.css\";\n// import {\n//   careerInformationForm,\n//   fetchCareerData,\n//   deleteCareerInformation,\n// } from \"../../services/ApiService\";\n\n// const CareerInformation = () => {\n//   const [isSectionOpen, setIsSectionOpen] = useState(false);\n//   const [showAlert, setShowAlert] = useState(false);\n//   const [careerData, setCareerData] = useState([]); // Stores data fetched from the backend\n//   const [formData, setFormData] = useState({\n//     company: \"\",\n//     designation: \"\",\n//     startYear: \"\",\n//     endYear: \"\",\n//   });\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [editId, setEditId] = useState(null); // To track editing ID\n//   const navigate = useNavigate();\n\n//   // Fetch career data from the backend when the component loads\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetchCareerData();\n//         if (response && response.data) {\n//           setCareerData(response.data); // Set the career data only if it's valid\n//         } else {\n//           alert(\"No data available or response is malformed.\");\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching career data:\", error);\n//         alert(\"Failed to fetch career data. Please try again later.\");\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n\n//   //   // Ensure user ID is available\n//   //   const storedUserData = localStorage.getItem(\"userData\");\n//   //   const userId = storedUserData ? JSON.parse(storedUserData).user.id : null;\n\n//   //   if (!userId) {\n//   //     alert(\"User ID is missing. Please log in again.\");\n//   //     return;\n//   //   }\n\n//   //   const dataToSubmit = { ...formData, userId };\n\n//   //   try {\n//   //     let response;\n\n//   //     if (isEditing) {\n//   //       // When editing, send the ID to the backend for updating the record\n//   //       response = await careerInformationForm(\n//   //         { ...dataToSubmit, id: editId },\n//   //         \"PUT\"\n//   //       );\n//   //     } else {\n//   //       // When creating new, no ID is sent\n//   //       response = await careerInformationForm(dataToSubmit, \"POST\");\n//   //     }\n\n//   //     alert(\"Career Information submitted successfully!\");\n//   //     setShowAlert(false);\n\n//   //     // Update local state based on whether we are editing or adding a new record\n//   //     const updatedData = isEditing\n//   //       ? careerData.map((item) => (item.id === editId ? response.data : item)) // Update the specific record\n//   //       : [...careerData, response.data]; // Add new data if not editing\n\n//   //     setCareerData(updatedData); // Update state with the new data\n\n//   //     // Reset form and editing state\n//   //     setFormData({\n//   //       company: \"\",\n//   //       designation: \"\",\n//   //       startYear: \"\",\n//   //       endYear: \"\",\n//   //     });\n//   //     setIsEditing(false);\n//   //     setEditId(null);\n//   //   } catch (error) {\n//   //     console.error(\"Error submitting form:\", error);\n//   //     alert(\"Failed to submit career information.\");\n//   //   }\n//   // };\n\n//   const handleSubmit = async (e) => {\n//   e.preventDefault();\n\n//   // Ensure user ID is available\n//   const storedUserData = localStorage.getItem(\"userData\");\n//   const userId = storedUserData ? JSON.parse(storedUserData).user.id : null;\n\n//   if (!userId) {\n//     alert(\"User ID is missing. Please log in again.\");\n//     return;\n//   }\n\n//   const dataToSubmit = { ...formData, userId };\n\n//   try {\n//     let response;\n\n//     if (isEditing) {\n//       // When editing, send the ID to the backend for updating the record\n//       response = await careerInformationForm(\n//         { ...dataToSubmit, id: editId },\n//         \"PUT\"\n//       );\n//       // Update the state immediately with the updated data\n//       setCareerData(careerData.map((item) =>\n//         item.id === editId ? response.data : item\n//       ));\n//     } else {\n//       // When creating new, no ID is sent\n//       response = await careerInformationForm(dataToSubmit, \"POST\");\n//       // Update the state by adding the new data\n//       setCareerData((prevData) => [...prevData, response.data]);\n//     }\n\n//     alert(\"Career Information submitted successfully!\");\n//     setShowAlert(false);\n\n//     // Reset the form and editing state\n//     setFormData({\n//       company: \"\",\n//       designation: \"\",\n//       startYear: \"\",\n//       endYear: \"\",\n//     });\n//     setIsEditing(false);\n//     setEditId(null);\n//   } catch (error) {\n//     console.error(\"Error submitting form:\", error);\n//     alert(\"Failed to submit career information.\");\n//   }\n// };\n\n//   const handleEdit = (id) => {\n//     // Find the career information item based on the ID\n//     const itemToEdit = careerData.find((item) => item.id === id);\n\n//     if (itemToEdit) {\n//       setFormData({\n//         company: itemToEdit?.company,\n//         designation: itemToEdit?.designation,\n//         startYear: itemToEdit?.startYear,\n//         endYear: itemToEdit?.endYear,\n//       });\n//       setIsEditing(true); // Set editing state to true\n//       setEditId(id); // Set the ID of the item being edited\n//       setShowAlert(true); // Optionally show the alert for editing\n//     }\n//   };\n\n//   const handleDelete = async (id) => {\n//     try {\n//       // Call the API to delete the record\n//       await deleteCareerInformation(id);\n\n//       // Update the UI by removing the deleted item from the state\n//       setCareerData((prevData) => prevData.filter((item) => item.id !== id));\n\n//       alert(\"Record deleted successfully.\");\n//     } catch (error) {\n//       console.error(\"Error deleting record:\", error);\n//       alert(\"Failed to delete record.\");\n//     }\n//   };\n\n//   const handleAlertClose = () => {\n//     setShowAlert(false);\n//   };\n\n//   const toggleSection = () => {\n//     setIsSectionOpen(!isSectionOpen);\n//   };\n\n//   return (\n//     <>\n//       <div className=\"collapsible-section\">\n//         <div className=\"section-header\" onClick={toggleSection}>\n//           <h5 className={`section-title ${isSectionOpen ? \"open\" : \"closed\"}`}>\n//             Career Information\n//           </h5>\n//           <span>\n//             {isSectionOpen ? (\n//               <i className=\"fa-solid fa-angle-up\"></i>\n//             ) : (\n//               <i className=\"fa-solid fa-angle-down\"></i>\n//             )}\n//           </span>\n//         </div>\n//         {isSectionOpen && (\n//           <div>\n//             <button\n//               type=\"submit\"\n//               className=\"add-new-button\"\n//               onClick={() => setShowAlert(true)}\n//             >\n//               <i\n//                 style={{ marginRight: \"5px\" }}\n//                 className=\"fa fa-plus\"\n//                 aria-hidden=\"true\"\n//               ></i>\n//               Add New\n//             </button>\n\n//             <table className=\"education-table\">\n//               <thead>\n//                 <tr>\n//                   <th>S.N</th>\n//                   <th>Company</th>\n//                   <th>Designation</th>\n//                   <th>Start Year</th>\n//                   <th>End Year</th>\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {careerData\n//                   ?.filter((item) => item != null)\n//                   .map((item, index) => (\n//                     <tr key={item?.id}>\n//                       <td>{index + 1}</td>\n//                       <td>{item?.company || \"N/A\"}</td>\n//                       <td>{item?.designation || \"N/A\"}</td>\n//                       <td>{item?.startYear || \"N/A\"}</td>\n//                       <td>{item?.endYear || \"N/A\"}</td>\n//                       <td>\n//                         <button\n//                           className=\"action-button edit-button\"\n//                           onClick={() => handleEdit(item?.id)}\n//                         >\n//                           ‚úèÔ∏è\n//                         </button>\n//                         <button\n//                           className=\"action-button delete-button\"\n//                           onClick={() => handleDelete(item?.id)}\n//                         >\n//                           üóëÔ∏è\n//                         </button>\n//                       </td>\n//                     </tr>\n//                   ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n\n//         {showAlert && (\n//           <div className=\"confirmation-alert\">\n//             <div className=\"education-information-dialog\">\n//               <div className=\"dialog-header\">\n//                 <h4>\n//                   {isEditing\n//                     ? \"Edit Career Information\"\n//                     : \"Add Career Information\"}\n//                 </h4>\n//                 <button className=\"cross-button\" onClick={handleAlertClose}>\n//                   <i className=\"bi bi-x cross-icon\"></i>\n//                 </button>\n//               </div>\n//               <form className=\"education-form\" onSubmit={handleSubmit}>\n//                 <div className=\"form-group\">\n//                   <input\n//                     type=\"text\"\n//                     name=\"company\"\n//                     value={formData.company}\n//                     placeholder=\"Company *\"\n//                     onChange={handleChange}\n//                     required\n//                   />\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <input\n//                     type=\"text\"\n//                     name=\"designation\"\n//                     value={formData.designation}\n//                     placeholder=\"Designation *\"\n//                     onChange={handleChange}\n//                     required\n//                   />\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <input\n//                     type=\"date\"\n//                     name=\"startYear\"\n//                     value={formData.startYear}\n//                     onChange={handleChange}\n//                     required\n//                   />\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <input\n//                     type=\"date\"\n//                     name=\"endYear\"\n//                     value={formData.endYear}\n//                     onChange={handleChange}\n//                   />\n//                 </div>\n//                 <button type=\"submit\" className=\"submit-button\">\n//                   {isEditing ? \"Update\" : \"Submit\"}\n//                 </button>\n//               </form>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     </>\n//   );\n// };\n\n// export default CareerInformation;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../../styles/user/dashboard.css\";\n// import \"../../styles/styles.css\";\n// import \"../../styles/user/profileSetting.css\";\n// import {\n//   careerInformationForm,\n//   fetchCareerData,\n//   deleteCareerInformation,\n// } from \"../../services/ApiService\";\n\n// // Import Toastify\n// import { ToastContainer, toast } from \"react-toastify\";\n// import \"react-toastify/dist/ReactToastify.css\";\n\n// const CareerInformation = () => {\n//   const [isSectionOpen, setIsSectionOpen] = useState(false);\n//   const [showAlert, setShowAlert] = useState(false);\n//   const [careerData, setCareerData] = useState([]); // Stores data fetched from the backend\n//   const [formData, setFormData] = useState({\n//     company: \"\",\n//     designation: \"\",\n//     startYear: \"\",\n//     endYear: \"\",\n//   });\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [editId, setEditId] = useState(null); // To track editing ID\n//   const navigate = useNavigate();\n\n// const fetchData = async () => {\n//   try {\n//     const storedUserData = localStorage.getItem(\"userData\");\n//     const parsedUserData = storedUserData ? JSON.parse(storedUserData) : null;\n//     const userId = parsedUserData?.user?.id;\n\n//     if (!userId) {\n//       toast.error(\"User ID is missing. Please log in again.\");\n//       return;\n//     }\n//     console.log(\"Fetching career data for userId:\", userId); // Debugging log\n\n//     const response = await fetchCareerData(userId);\n//     if (response && response.data) {\n//       setCareerData(response.data); // Set the career data only if it's valid\n//     } else {\n//       toast.error(\"No data available or response is malformed.\");\n//     }\n//   } catch (error) {\n//     console.error(\"Error fetching career data:\", error);\n//     toast.error(\"Failed to fetch career data. Please try again later.\");\n//   }\n// };\n\n//   const fetchData = async () => {\n//     try {\n//       const storedUserData = localStorage.getItem(\"userData\");\n//       const parsedUserData = storedUserData ? JSON.parse(storedUserData) : null;\n//       const userId = parsedUserData?.user?.id;\n\n//       if (!userId) {\n//         toast.error(\"User ID is missing. Please log in again.\");\n//         return;\n//       }\n\n//       console.log(\"Fetching career data for userId:\", userId); // Debugging log\n\n//       const response = await fetchCareerData(userId);\n\n//       if (response && response.data) {\n//         setCareerData(response.data); // Set the career data only if it's valid\n//       } else {\n//         console.warn(\"No career data found. Setting empty array.\");\n//         setCareerData([]); // Ensure careerData is an empty array to avoid .filter() errors\n//       }\n//     } catch (error) {\n//       if (error.response && error.response.status === 404) {\n//         console.warn(\"No career data found for user. Setting empty array.\");\n//         setCareerData([]); // Set empty array if no data found (404)\n//       } else {\n//         console.error(\"Error fetching career data:\", error);\n//         toast.error(\"Failed to fetch career data. Please try again later.\");\n//       }\n//     }\n//   };\n\n//   // Fetch career data from the backend when the component loads\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Ensure user ID is available\n//     // const storedUserData = localStorage.getItem(\"userData\");\n//     // const userId = storedUserData ? JSON.parse(storedUserData).user.id : null;\n\n//     // if (!userId) {\n//     //   toast.error(\"User ID is missing. Please log in again.\");\n//     //   return;\n//     // }\n//     const storedUserData = localStorage.getItem(\"userData\");\n//     const parsedUserData = storedUserData ? JSON.parse(storedUserData) : null;\n//     const userId = parsedUserData?.user?.id;\n\n//     if (!userId) {\n//       toast.error(\"User ID is missing. Please log in again.\");\n//       return;\n//     }\n\n//     const dataToSubmit = { ...formData, userId };\n\n//     try {\n//       let response;\n\n//       if (isEditing) {\n//         // When editing, send the ID to the backend for updating the record\n//         response = await careerInformationForm(\n//           { ...dataToSubmit, id: editId },\n//           \"PUT\"\n//         );\n//         // Update the state immediately with the updated data\n//         setCareerData(\n//           careerData.map((item) => (item.id === editId ? response.data : item))\n//         );\n//       } else {\n//         // When creating new, no ID is sent\n//         response = await careerInformationForm(dataToSubmit, \"POST\");\n//         // Update the state by adding the new data\n//         setCareerData((prevData) => [...prevData, response.data]);\n//       }\n\n//       toast.success(\"Career Information submitted successfully!\");\n\n//       // Reset the form and editing state\n//       setFormData({\n//         company: \"\",\n//         designation: \"\",\n//         startYear: \"\",\n//         endYear: \"\",\n//       });\n//       setIsEditing(false);\n//       setEditId(null);\n//       setShowAlert(false);\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//       toast.error(\"Failed to submit career information.\");\n//     }\n//   };\n\n//   const handleEdit = (id) => {\n//     // Find the career information item based on the ID\n//     const itemToEdit = careerData.find((item) => item.id === id);\n\n//     if (itemToEdit) {\n//       setFormData({\n//         company: itemToEdit?.company,\n//         designation: itemToEdit?.designation,\n//         startYear: itemToEdit?.startYear,\n//         endYear: itemToEdit?.endYear,\n//       });\n//       setIsEditing(true); // Set editing state to true\n//       setEditId(id); // Set the ID of the item being edited\n//       setShowAlert(true); // Optionally show the alert for editing\n//     }\n//   };\n\n//   const handleDelete = async (id) => {\n//     try {\n//       // Call the API to delete the record\n//       await deleteCareerInformation(id);\n\n//       // Update the UI by removing the deleted item from the state\n//       // setCareerData((prevData) => prevData.filter((item) => item.id !== id));\n//       setCareerData((prevData) => Array.isArray(prevData) ? prevData.filter((item) => item.id !== id) : []);\n\n//       toast.success(\"Record deleted successfully.\");\n//     } catch (error) {\n//       console.error(\"Error deleting record:\", error);\n//       toast.error(\"Failed to delete record.\");\n//     }\n//   };\n\n//   const handleAlertClose = () => {\n//     setShowAlert(false);\n//   };\n\n//   const toggleSection = () => {\n//     setIsSectionOpen(!isSectionOpen);\n//   };\n\n//   return (\n//     <>\n//       <div className=\"collapsible-section\">\n//         <div className=\"section-header\" onClick={toggleSection}>\n//           <h5 className={`section-title ${isSectionOpen ? \"open\" : \"closed\"}`}>\n//             Career Information\n//           </h5>\n//           <span>\n//             {isSectionOpen ? (\n//               <i className=\"fa-solid fa-angle-up\"></i>\n//             ) : (\n//               <i className=\"fa-solid fa-angle-down\"></i>\n//             )}\n//           </span>\n//         </div>\n//         {isSectionOpen && (\n//           <div>\n//             <button\n//               type=\"submit\"\n//               className=\"add-new-button\"\n//               onClick={() => setShowAlert(true)}\n//             >\n//               <i\n//                 style={{ marginRight: \"5px\" }}\n//                 className=\"fa fa-plus\"\n//                 aria-hidden=\"true\"\n//               ></i>\n//               Add New\n//             </button>\n\n//             <table className=\"education-table\">\n//               <thead>\n//                 <tr>\n//                   <th>S.N</th>\n//                   <th>Company</th>\n//                   <th>Designation</th>\n//                   <th>Start Year</th>\n//                   <th>End Year</th>\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {(Array.isArray(careerData) ? careerData : [])\n//                 .filter((item) => item != null)\n//                 .map((item, index) => (\n//                    <tr key={item.id}>\n//                       <td>{index + 1}</td>\n//                       <td>{item.company || \"N/A\"}</td>\n//                       <td>{item.designation || \"N/A\"}</td>\n//                       <td>{item.startYear || \"N/A\"}</td>\n//                       <td>{item.endYear || \"N/A\"}</td>\n//                       <td>\n//                         <button\n//                           className=\"action-button edit-button\"\n//                           onClick={() => handleEdit(item?.id)}\n//                         >\n//                           ‚úèÔ∏è\n//                         </button>\n//                         <button\n//                           className=\"action-button delete-button\"\n//                           onClick={() => handleDelete(item?.id)}\n//                         >\n//                           üóëÔ∏è\n//                         </button>\n//                       </td>\n//                     </tr>\n//                   ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n\n//         {showAlert && (\n//           <div className=\"confirmation-alert\">\n//             <div className=\"education-information-dialog\">\n//               <div className=\"dialog-header\">\n//                 <h4>\n//                   {isEditing\n//                     ? \"Edit Career Information\"\n//                     : \"Add Career Information\"}\n//                 </h4>\n//                 <button className=\"cross-button\" onClick={handleAlertClose}>\n//                   <i className=\"bi bi-x cross-icon\"></i>\n//                 </button>\n//               </div>\n//               <form className=\"education-form\" onSubmit={handleSubmit}>\n//                 <div className=\"form-group\">\n//                   <input\n//                     type=\"text\"\n//                     name=\"company\"\n//                     value={formData.company}\n//                     placeholder=\"Company *\"\n//                     onChange={handleChange}\n//                     required\n//                   />\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <input\n//                     type=\"text\"\n//                     name=\"designation\"\n//                     value={formData.designation}\n//                     placeholder=\"Designation *\"\n//                     onChange={handleChange}\n//                     required\n//                   />\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <input\n//                     type=\"date\"\n//                     name=\"startYear\"\n//                     value={formData.startYear}\n//                     onChange={handleChange}\n//                     required\n//                   />\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <input\n//                     type=\"date\"\n//                     name=\"endYear\"\n//                     value={formData.endYear}\n//                     onChange={handleChange}\n//                   />\n//                 </div>\n//                 <button type=\"submit\" className=\"submit-button\">\n//                   {isEditing ? \"Update\" : \"Submit\"}\n//                 </button>\n//               </form>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Toast Notifications */}\n//       <ToastContainer />\n//     </>\n//   );\n// };\n\n// export default CareerInformation;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"../../styles/user/dashboard.css\";\nimport \"../../styles/styles.css\";\nimport \"../../styles/user/profileSetting.css\";\nimport { careerInformationForm, fetchCareerData, deleteCareerInformation } from \"../../services/ApiService\";\n\n// Import Toastify\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CareerInformation = () => {\n  _s();\n  const [isSectionOpen, setIsSectionOpen] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [careerData, setCareerData] = useState([]); // Stores data fetched from the backend\n  const [formData, setFormData] = useState({\n    company: \"\",\n    designation: \"\",\n    startYear: \"\",\n    endYear: \"\"\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  const [editId, setEditId] = useState(null); // To track editing ID\n\n  // Fetch Career Data\n  const fetchData = async () => {\n    try {\n      var _parsedUserData$user;\n      const storedUserData = localStorage.getItem(\"userData\");\n      const parsedUserData = storedUserData ? JSON.parse(storedUserData) : null;\n      const userId = parsedUserData === null || parsedUserData === void 0 ? void 0 : (_parsedUserData$user = parsedUserData.user) === null || _parsedUserData$user === void 0 ? void 0 : _parsedUserData$user.id;\n      if (!userId) {\n        toast.error(\"User ID is missing. Please log in again.\");\n        return;\n      }\n      console.log(\"Fetching career data for userId:\", userId);\n      const response = await fetchCareerData(userId);\n      if (response && response.data) {\n        console.log(\"Career data response:\", response.data);\n        setCareerData(Array.isArray(response.data) ? response.data : [response.data]);\n      } else {\n        console.warn(\"No career data found. Setting empty array.\");\n        setCareerData([]);\n      }\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        console.warn(\"No career data found for user. Setting empty array.\");\n        setCareerData([]);\n      } else {\n        console.error(\"Error fetching career data:\", error);\n        toast.error(\"Failed to fetch career data. Please try again later.\");\n      }\n    }\n  };\n\n  // Fetch career data when component mounts\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Handle Input Change\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Handle Form Submit\n  const handleSubmit = async e => {\n    var _parsedUserData$user2;\n    e.preventDefault();\n    const storedUserData = localStorage.getItem(\"userData\");\n    const parsedUserData = storedUserData ? JSON.parse(storedUserData) : null;\n    const userId = parsedUserData === null || parsedUserData === void 0 ? void 0 : (_parsedUserData$user2 = parsedUserData.user) === null || _parsedUserData$user2 === void 0 ? void 0 : _parsedUserData$user2.id;\n    if (!userId) {\n      toast.error(\"User ID is missing. Please log in again.\");\n      return;\n    }\n    const dataToSubmit = {\n      ...formData,\n      userId\n    };\n    try {\n      let response;\n      if (isEditing) {\n        response = await careerInformationForm({\n          ...dataToSubmit,\n          id: editId\n        }, \"PUT\");\n        setCareerData(prevData => prevData.map(item => item.id === editId ? response.data : item));\n      } else {\n        response = await careerInformationForm(dataToSubmit, \"POST\");\n        setCareerData(prevData => [...prevData, response.data]);\n      }\n      toast.success(\"Career Information submitted successfully!\");\n      fetchData(); // Refresh UI after saving\n\n      // Reset Form\n      setFormData({\n        company: \"\",\n        designation: \"\",\n        startYear: \"\",\n        endYear: \"\"\n      });\n      setIsEditing(false);\n      setEditId(null);\n      setShowAlert(false);\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n      toast.error(\"Failed to submit career information.\");\n    }\n  };\n\n  // Handle Edit\n  const handleEdit = id => {\n    const itemToEdit = careerData.find(item => item.id === id);\n    if (itemToEdit) {\n      setFormData({\n        company: (itemToEdit === null || itemToEdit === void 0 ? void 0 : itemToEdit.company) || \"\",\n        designation: (itemToEdit === null || itemToEdit === void 0 ? void 0 : itemToEdit.designation) || \"\",\n        startYear: (itemToEdit === null || itemToEdit === void 0 ? void 0 : itemToEdit.startYear) || \"\",\n        endYear: (itemToEdit === null || itemToEdit === void 0 ? void 0 : itemToEdit.endYear) || \"\"\n      });\n      setIsEditing(true);\n      setEditId(id);\n      setShowAlert(true);\n    }\n  };\n\n  // Handle Delete\n  const handleDelete = async id => {\n    try {\n      await deleteCareerInformation(id);\n      setCareerData(prevData => Array.isArray(prevData) ? prevData.filter(item => item.id !== id) : []);\n      toast.success(\"Record deleted successfully.\");\n    } catch (error) {\n      console.error(\"Error deleting record:\", error);\n      toast.error(\"Failed to delete record.\");\n    }\n  };\n\n  // Close Modal\n  const handleAlertClose = () => {\n    setShowAlert(false);\n  };\n\n  // Toggle Section\n  const toggleSection = () => {\n    setIsSectionOpen(!isSectionOpen);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"collapsible-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-header\",\n        onClick: toggleSection,\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: `section-title ${isSectionOpen ? \"open\" : \"closed\"}`,\n          children: \"Career Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 830,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: isSectionOpen ? /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angle-up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 831,\n            columnNumber: 34\n          }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angle-down\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 831,\n            columnNumber: 77\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 9\n      }, this), isSectionOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"add-new-button\",\n          onClick: () => setShowAlert(true),\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            style: {\n              marginRight: \"5px\"\n            },\n            className: \"fa fa-plus\",\n            \"aria-hidden\": \"true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 836,\n            columnNumber: 15\n          }, this), \"Add New\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 835,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"education-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"S.N\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 842,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Company\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 843,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Designation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 844,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Start Year\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 845,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"End Year\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 846,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 847,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 841,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: (Array.isArray(careerData) ? careerData : []).filter(item => item != null).map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 855,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.company || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 856,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.designation || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 857,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.startYear || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 858,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.endYear || \"N/A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 859,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"action-button edit-button\",\n                  onClick: () => handleEdit(item === null || item === void 0 ? void 0 : item.id),\n                  children: \"\\u270F\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 861,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"action-button delete-button\",\n                  onClick: () => handleDelete(item === null || item === void 0 ? void 0 : item.id),\n                  children: \"\\uD83D\\uDDD1\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 862,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 860,\n                columnNumber: 23\n              }, this)]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 854,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 834,\n        columnNumber: 11\n      }, this), showAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-alert\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"education-information-dialog\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dialog-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: isEditing ? \"Edit Career Information\" : \"Add Career Information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 875,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"cross-button\",\n              onClick: handleAlertClose,\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"bi bi-x cross-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 876,\n                columnNumber: 77\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 876,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 874,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"education-form\",\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"company\",\n              value: formData.company,\n              placeholder: \"Company *\",\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 879,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"designation\",\n              value: formData.designation,\n              placeholder: \"Designation *\",\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 880,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"startYear\",\n              value: formData.startYear,\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 881,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"endYear\",\n              value: formData.endYear,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 882,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: isEditing ? \"Update\" : \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 883,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 878,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 828,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 889,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(CareerInformation, \"AtvYKTh+Oy3qa/n7O0+ZxnBEl5I=\");\n_c = CareerInformation;\nexport default CareerInformation;\nvar _c;\n$RefreshReg$(_c, \"CareerInformation\");","map":{"version":3,"names":["React","useState","useEffect","careerInformationForm","fetchCareerData","deleteCareerInformation","ToastContainer","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","CareerInformation","_s","isSectionOpen","setIsSectionOpen","showAlert","setShowAlert","careerData","setCareerData","formData","setFormData","company","designation","startYear","endYear","isEditing","setIsEditing","editId","setEditId","fetchData","_parsedUserData$user","storedUserData","localStorage","getItem","parsedUserData","JSON","parse","userId","user","id","error","console","log","response","data","Array","isArray","warn","status","handleChange","e","target","name","value","handleSubmit","_parsedUserData$user2","preventDefault","dataToSubmit","prevData","map","item","success","handleEdit","itemToEdit","find","handleDelete","filter","handleAlertClose","toggleSection","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","style","marginRight","index","onSubmit","placeholder","onChange","required","_c","$RefreshReg$"],"sources":["E:/MatriLab-frontend/src/screens/user/CareerInformation.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"../../styles/user/dashboard.css\";\r\n// import \"../../styles/styles.css\";\r\n// import \"../../styles/user/profileSetting.css\";\r\n// import {\r\n//   careerInformationForm,\r\n//   fetchCareerData,\r\n//   deleteCareerInformation,\r\n// } from \"../../services/ApiService\";\r\n\r\n// const CareerInformation = () => {\r\n//   const [isSectionOpen, setIsSectionOpen] = useState(false);\r\n//   const [showAlert, setShowAlert] = useState(false);\r\n//   const [careerData, setCareerData] = useState([]); // Stores data fetched from the backend\r\n//   const [formData, setFormData] = useState({\r\n//     company: \"\",\r\n//     designation: \"\",\r\n//     startYear: \"\",\r\n//     endYear: \"\",\r\n//   });\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [editId, setEditId] = useState(null); // To track editing ID\r\n//   const navigate = useNavigate();\r\n\r\n//   // Fetch career data from the backend when the component loads\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const response = await fetchCareerData();\r\n//         if (response && response.data) {\r\n//           setCareerData(response.data); // Set the career data only if it's valid\r\n//         } else {\r\n//           alert(\"No data available or response is malformed.\");\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching career data:\", error);\r\n//         alert(\"Failed to fetch career data. Please try again later.\");\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const handleChange = (e) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   // const handleSubmit = async (e) => {\r\n//   //   e.preventDefault();\r\n\r\n//   //   // Ensure user ID is available\r\n//   //   const storedUserData = localStorage.getItem(\"userData\");\r\n//   //   const userId = storedUserData ? JSON.parse(storedUserData).user.id : null;\r\n\r\n//   //   if (!userId) {\r\n//   //     alert(\"User ID is missing. Please log in again.\");\r\n//   //     return;\r\n//   //   }\r\n\r\n//   //   const dataToSubmit = { ...formData, userId };\r\n\r\n//   //   try {\r\n//   //     let response;\r\n\r\n//   //     if (isEditing) {\r\n//   //       // When editing, send the ID to the backend for updating the record\r\n//   //       response = await careerInformationForm(\r\n//   //         { ...dataToSubmit, id: editId },\r\n//   //         \"PUT\"\r\n//   //       );\r\n//   //     } else {\r\n//   //       // When creating new, no ID is sent\r\n//   //       response = await careerInformationForm(dataToSubmit, \"POST\");\r\n//   //     }\r\n\r\n//   //     alert(\"Career Information submitted successfully!\");\r\n//   //     setShowAlert(false);\r\n\r\n//   //     // Update local state based on whether we are editing or adding a new record\r\n//   //     const updatedData = isEditing\r\n//   //       ? careerData.map((item) => (item.id === editId ? response.data : item)) // Update the specific record\r\n//   //       : [...careerData, response.data]; // Add new data if not editing\r\n\r\n//   //     setCareerData(updatedData); // Update state with the new data\r\n\r\n//   //     // Reset form and editing state\r\n//   //     setFormData({\r\n//   //       company: \"\",\r\n//   //       designation: \"\",\r\n//   //       startYear: \"\",\r\n//   //       endYear: \"\",\r\n//   //     });\r\n//   //     setIsEditing(false);\r\n//   //     setEditId(null);\r\n//   //   } catch (error) {\r\n//   //     console.error(\"Error submitting form:\", error);\r\n//   //     alert(\"Failed to submit career information.\");\r\n//   //   }\r\n//   // };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//   e.preventDefault();\r\n\r\n//   // Ensure user ID is available\r\n//   const storedUserData = localStorage.getItem(\"userData\");\r\n//   const userId = storedUserData ? JSON.parse(storedUserData).user.id : null;\r\n\r\n//   if (!userId) {\r\n//     alert(\"User ID is missing. Please log in again.\");\r\n//     return;\r\n//   }\r\n\r\n//   const dataToSubmit = { ...formData, userId };\r\n\r\n//   try {\r\n//     let response;\r\n\r\n//     if (isEditing) {\r\n//       // When editing, send the ID to the backend for updating the record\r\n//       response = await careerInformationForm(\r\n//         { ...dataToSubmit, id: editId },\r\n//         \"PUT\"\r\n//       );\r\n//       // Update the state immediately with the updated data\r\n//       setCareerData(careerData.map((item) =>\r\n//         item.id === editId ? response.data : item\r\n//       ));\r\n//     } else {\r\n//       // When creating new, no ID is sent\r\n//       response = await careerInformationForm(dataToSubmit, \"POST\");\r\n//       // Update the state by adding the new data\r\n//       setCareerData((prevData) => [...prevData, response.data]);\r\n//     }\r\n\r\n//     alert(\"Career Information submitted successfully!\");\r\n//     setShowAlert(false);\r\n\r\n//     // Reset the form and editing state\r\n//     setFormData({\r\n//       company: \"\",\r\n//       designation: \"\",\r\n//       startYear: \"\",\r\n//       endYear: \"\",\r\n//     });\r\n//     setIsEditing(false);\r\n//     setEditId(null);\r\n//   } catch (error) {\r\n//     console.error(\"Error submitting form:\", error);\r\n//     alert(\"Failed to submit career information.\");\r\n//   }\r\n// };\r\n\r\n//   const handleEdit = (id) => {\r\n//     // Find the career information item based on the ID\r\n//     const itemToEdit = careerData.find((item) => item.id === id);\r\n\r\n//     if (itemToEdit) {\r\n//       setFormData({\r\n//         company: itemToEdit?.company,\r\n//         designation: itemToEdit?.designation,\r\n//         startYear: itemToEdit?.startYear,\r\n//         endYear: itemToEdit?.endYear,\r\n//       });\r\n//       setIsEditing(true); // Set editing state to true\r\n//       setEditId(id); // Set the ID of the item being edited\r\n//       setShowAlert(true); // Optionally show the alert for editing\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     try {\r\n//       // Call the API to delete the record\r\n//       await deleteCareerInformation(id);\r\n\r\n//       // Update the UI by removing the deleted item from the state\r\n//       setCareerData((prevData) => prevData.filter((item) => item.id !== id));\r\n\r\n//       alert(\"Record deleted successfully.\");\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting record:\", error);\r\n//       alert(\"Failed to delete record.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAlertClose = () => {\r\n//     setShowAlert(false);\r\n//   };\r\n\r\n//   const toggleSection = () => {\r\n//     setIsSectionOpen(!isSectionOpen);\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"collapsible-section\">\r\n//         <div className=\"section-header\" onClick={toggleSection}>\r\n//           <h5 className={`section-title ${isSectionOpen ? \"open\" : \"closed\"}`}>\r\n//             Career Information\r\n//           </h5>\r\n//           <span>\r\n//             {isSectionOpen ? (\r\n//               <i className=\"fa-solid fa-angle-up\"></i>\r\n//             ) : (\r\n//               <i className=\"fa-solid fa-angle-down\"></i>\r\n//             )}\r\n//           </span>\r\n//         </div>\r\n//         {isSectionOpen && (\r\n//           <div>\r\n//             <button\r\n//               type=\"submit\"\r\n//               className=\"add-new-button\"\r\n//               onClick={() => setShowAlert(true)}\r\n//             >\r\n//               <i\r\n//                 style={{ marginRight: \"5px\" }}\r\n//                 className=\"fa fa-plus\"\r\n//                 aria-hidden=\"true\"\r\n//               ></i>\r\n//               Add New\r\n//             </button>\r\n\r\n//             <table className=\"education-table\">\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th>S.N</th>\r\n//                   <th>Company</th>\r\n//                   <th>Designation</th>\r\n//                   <th>Start Year</th>\r\n//                   <th>End Year</th>\r\n//                   <th>Actions</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {careerData\r\n//                   ?.filter((item) => item != null)\r\n//                   .map((item, index) => (\r\n//                     <tr key={item?.id}>\r\n//                       <td>{index + 1}</td>\r\n//                       <td>{item?.company || \"N/A\"}</td>\r\n//                       <td>{item?.designation || \"N/A\"}</td>\r\n//                       <td>{item?.startYear || \"N/A\"}</td>\r\n//                       <td>{item?.endYear || \"N/A\"}</td>\r\n//                       <td>\r\n//                         <button\r\n//                           className=\"action-button edit-button\"\r\n//                           onClick={() => handleEdit(item?.id)}\r\n//                         >\r\n//                           ‚úèÔ∏è\r\n//                         </button>\r\n//                         <button\r\n//                           className=\"action-button delete-button\"\r\n//                           onClick={() => handleDelete(item?.id)}\r\n//                         >\r\n//                           üóëÔ∏è\r\n//                         </button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         )}\r\n\r\n//         {showAlert && (\r\n//           <div className=\"confirmation-alert\">\r\n//             <div className=\"education-information-dialog\">\r\n//               <div className=\"dialog-header\">\r\n//                 <h4>\r\n//                   {isEditing\r\n//                     ? \"Edit Career Information\"\r\n//                     : \"Add Career Information\"}\r\n//                 </h4>\r\n//                 <button className=\"cross-button\" onClick={handleAlertClose}>\r\n//                   <i className=\"bi bi-x cross-icon\"></i>\r\n//                 </button>\r\n//               </div>\r\n//               <form className=\"education-form\" onSubmit={handleSubmit}>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     name=\"company\"\r\n//                     value={formData.company}\r\n//                     placeholder=\"Company *\"\r\n//                     onChange={handleChange}\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     name=\"designation\"\r\n//                     value={formData.designation}\r\n//                     placeholder=\"Designation *\"\r\n//                     onChange={handleChange}\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"date\"\r\n//                     name=\"startYear\"\r\n//                     value={formData.startYear}\r\n//                     onChange={handleChange}\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"date\"\r\n//                     name=\"endYear\"\r\n//                     value={formData.endYear}\r\n//                     onChange={handleChange}\r\n//                   />\r\n//                 </div>\r\n//                 <button type=\"submit\" className=\"submit-button\">\r\n//                   {isEditing ? \"Update\" : \"Submit\"}\r\n//                 </button>\r\n//               </form>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default CareerInformation;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"../../styles/user/dashboard.css\";\r\n// import \"../../styles/styles.css\";\r\n// import \"../../styles/user/profileSetting.css\";\r\n// import {\r\n//   careerInformationForm,\r\n//   fetchCareerData,\r\n//   deleteCareerInformation,\r\n// } from \"../../services/ApiService\";\r\n\r\n// // Import Toastify\r\n// import { ToastContainer, toast } from \"react-toastify\";\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// const CareerInformation = () => {\r\n//   const [isSectionOpen, setIsSectionOpen] = useState(false);\r\n//   const [showAlert, setShowAlert] = useState(false);\r\n//   const [careerData, setCareerData] = useState([]); // Stores data fetched from the backend\r\n//   const [formData, setFormData] = useState({\r\n//     company: \"\",\r\n//     designation: \"\",\r\n//     startYear: \"\",\r\n//     endYear: \"\",\r\n//   });\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [editId, setEditId] = useState(null); // To track editing ID\r\n//   const navigate = useNavigate();\r\n\r\n  // const fetchData = async () => {\r\n  //   try {\r\n  //     const storedUserData = localStorage.getItem(\"userData\");\r\n  //     const parsedUserData = storedUserData ? JSON.parse(storedUserData) : null;\r\n  //     const userId = parsedUserData?.user?.id;\r\n\r\n  //     if (!userId) {\r\n  //       toast.error(\"User ID is missing. Please log in again.\");\r\n  //       return;\r\n  //     }\r\n  //     console.log(\"Fetching career data for userId:\", userId); // Debugging log\r\n\r\n  //     const response = await fetchCareerData(userId);\r\n  //     if (response && response.data) {\r\n  //       setCareerData(response.data); // Set the career data only if it's valid\r\n  //     } else {\r\n  //       toast.error(\"No data available or response is malformed.\");\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching career data:\", error);\r\n  //     toast.error(\"Failed to fetch career data. Please try again later.\");\r\n  //   }\r\n  // };\r\n\r\n//   const fetchData = async () => {\r\n//     try {\r\n//       const storedUserData = localStorage.getItem(\"userData\");\r\n//       const parsedUserData = storedUserData ? JSON.parse(storedUserData) : null;\r\n//       const userId = parsedUserData?.user?.id;\r\n  \r\n//       if (!userId) {\r\n//         toast.error(\"User ID is missing. Please log in again.\");\r\n//         return;\r\n//       }\r\n  \r\n//       console.log(\"Fetching career data for userId:\", userId); // Debugging log\r\n  \r\n//       const response = await fetchCareerData(userId);\r\n  \r\n//       if (response && response.data) {\r\n//         setCareerData(response.data); // Set the career data only if it's valid\r\n//       } else {\r\n//         console.warn(\"No career data found. Setting empty array.\");\r\n//         setCareerData([]); // Ensure careerData is an empty array to avoid .filter() errors\r\n//       }\r\n//     } catch (error) {\r\n//       if (error.response && error.response.status === 404) {\r\n//         console.warn(\"No career data found for user. Setting empty array.\");\r\n//         setCareerData([]); // Set empty array if no data found (404)\r\n//       } else {\r\n//         console.error(\"Error fetching career data:\", error);\r\n//         toast.error(\"Failed to fetch career data. Please try again later.\");\r\n//       }\r\n//     }\r\n//   };\r\n  \r\n//   // Fetch career data from the backend when the component loads\r\n//   useEffect(() => {\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const handleChange = (e) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     // Ensure user ID is available\r\n//     // const storedUserData = localStorage.getItem(\"userData\");\r\n//     // const userId = storedUserData ? JSON.parse(storedUserData).user.id : null;\r\n\r\n//     // if (!userId) {\r\n//     //   toast.error(\"User ID is missing. Please log in again.\");\r\n//     //   return;\r\n//     // }\r\n//     const storedUserData = localStorage.getItem(\"userData\");\r\n//     const parsedUserData = storedUserData ? JSON.parse(storedUserData) : null;\r\n//     const userId = parsedUserData?.user?.id;\r\n\r\n//     if (!userId) {\r\n//       toast.error(\"User ID is missing. Please log in again.\");\r\n//       return;\r\n//     }\r\n\r\n//     const dataToSubmit = { ...formData, userId };\r\n\r\n//     try {\r\n//       let response;\r\n\r\n//       if (isEditing) {\r\n//         // When editing, send the ID to the backend for updating the record\r\n//         response = await careerInformationForm(\r\n//           { ...dataToSubmit, id: editId },\r\n//           \"PUT\"\r\n//         );\r\n//         // Update the state immediately with the updated data\r\n//         setCareerData(\r\n//           careerData.map((item) => (item.id === editId ? response.data : item))\r\n//         );\r\n//       } else {\r\n//         // When creating new, no ID is sent\r\n//         response = await careerInformationForm(dataToSubmit, \"POST\");\r\n//         // Update the state by adding the new data\r\n//         setCareerData((prevData) => [...prevData, response.data]);\r\n//       }\r\n\r\n//       toast.success(\"Career Information submitted successfully!\");\r\n\r\n//       // Reset the form and editing state\r\n//       setFormData({\r\n//         company: \"\",\r\n//         designation: \"\",\r\n//         startYear: \"\",\r\n//         endYear: \"\",\r\n//       });\r\n//       setIsEditing(false);\r\n//       setEditId(null);\r\n//       setShowAlert(false);\r\n//     } catch (error) {\r\n//       console.error(\"Error submitting form:\", error);\r\n//       toast.error(\"Failed to submit career information.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleEdit = (id) => {\r\n//     // Find the career information item based on the ID\r\n//     const itemToEdit = careerData.find((item) => item.id === id);\r\n\r\n//     if (itemToEdit) {\r\n//       setFormData({\r\n//         company: itemToEdit?.company,\r\n//         designation: itemToEdit?.designation,\r\n//         startYear: itemToEdit?.startYear,\r\n//         endYear: itemToEdit?.endYear,\r\n//       });\r\n//       setIsEditing(true); // Set editing state to true\r\n//       setEditId(id); // Set the ID of the item being edited\r\n//       setShowAlert(true); // Optionally show the alert for editing\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     try {\r\n//       // Call the API to delete the record\r\n//       await deleteCareerInformation(id);\r\n\r\n//       // Update the UI by removing the deleted item from the state\r\n//       // setCareerData((prevData) => prevData.filter((item) => item.id !== id));\r\n//       setCareerData((prevData) => Array.isArray(prevData) ? prevData.filter((item) => item.id !== id) : []);\r\n\r\n      \r\n//       toast.success(\"Record deleted successfully.\");\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting record:\", error);\r\n//       toast.error(\"Failed to delete record.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAlertClose = () => {\r\n//     setShowAlert(false);\r\n//   };\r\n\r\n//   const toggleSection = () => {\r\n//     setIsSectionOpen(!isSectionOpen);\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"collapsible-section\">\r\n//         <div className=\"section-header\" onClick={toggleSection}>\r\n//           <h5 className={`section-title ${isSectionOpen ? \"open\" : \"closed\"}`}>\r\n//             Career Information\r\n//           </h5>\r\n//           <span>\r\n//             {isSectionOpen ? (\r\n//               <i className=\"fa-solid fa-angle-up\"></i>\r\n//             ) : (\r\n//               <i className=\"fa-solid fa-angle-down\"></i>\r\n//             )}\r\n//           </span>\r\n//         </div>\r\n//         {isSectionOpen && (\r\n//           <div>\r\n//             <button\r\n//               type=\"submit\"\r\n//               className=\"add-new-button\"\r\n//               onClick={() => setShowAlert(true)}\r\n//             >\r\n//               <i\r\n//                 style={{ marginRight: \"5px\" }}\r\n//                 className=\"fa fa-plus\"\r\n//                 aria-hidden=\"true\"\r\n//               ></i>\r\n//               Add New\r\n//             </button>\r\n\r\n//             <table className=\"education-table\">\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th>S.N</th>\r\n//                   <th>Company</th>\r\n//                   <th>Designation</th>\r\n//                   <th>Start Year</th>\r\n//                   <th>End Year</th>\r\n//                   <th>Actions</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {(Array.isArray(careerData) ? careerData : [])\r\n//                 .filter((item) => item != null)\r\n//                 .map((item, index) => (\r\n//                    <tr key={item.id}>\r\n//                       <td>{index + 1}</td>\r\n//                       <td>{item.company || \"N/A\"}</td>\r\n//                       <td>{item.designation || \"N/A\"}</td>\r\n//                       <td>{item.startYear || \"N/A\"}</td>\r\n//                       <td>{item.endYear || \"N/A\"}</td>\r\n//                       <td>\r\n//                         <button\r\n//                           className=\"action-button edit-button\"\r\n//                           onClick={() => handleEdit(item?.id)}\r\n//                         >\r\n//                           ‚úèÔ∏è\r\n//                         </button>\r\n//                         <button\r\n//                           className=\"action-button delete-button\"\r\n//                           onClick={() => handleDelete(item?.id)}\r\n//                         >\r\n//                           üóëÔ∏è\r\n//                         </button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         )}\r\n\r\n//         {showAlert && (\r\n//           <div className=\"confirmation-alert\">\r\n//             <div className=\"education-information-dialog\">\r\n//               <div className=\"dialog-header\">\r\n//                 <h4>\r\n//                   {isEditing\r\n//                     ? \"Edit Career Information\"\r\n//                     : \"Add Career Information\"}\r\n//                 </h4>\r\n//                 <button className=\"cross-button\" onClick={handleAlertClose}>\r\n//                   <i className=\"bi bi-x cross-icon\"></i>\r\n//                 </button>\r\n//               </div>\r\n//               <form className=\"education-form\" onSubmit={handleSubmit}>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     name=\"company\"\r\n//                     value={formData.company}\r\n//                     placeholder=\"Company *\"\r\n//                     onChange={handleChange}\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     name=\"designation\"\r\n//                     value={formData.designation}\r\n//                     placeholder=\"Designation *\"\r\n//                     onChange={handleChange}\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"date\"\r\n//                     name=\"startYear\"\r\n//                     value={formData.startYear}\r\n//                     onChange={handleChange}\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"date\"\r\n//                     name=\"endYear\"\r\n//                     value={formData.endYear}\r\n//                     onChange={handleChange}\r\n//                   />\r\n//                 </div>\r\n//                 <button type=\"submit\" className=\"submit-button\">\r\n//                   {isEditing ? \"Update\" : \"Submit\"}\r\n//                 </button>\r\n//               </form>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Toast Notifications */}\r\n//       <ToastContainer />\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default CareerInformation;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"../../styles/user/dashboard.css\";\r\nimport \"../../styles/styles.css\";\r\nimport \"../../styles/user/profileSetting.css\";\r\nimport {\r\n  careerInformationForm,\r\n  fetchCareerData,\r\n  deleteCareerInformation,\r\n} from \"../../services/ApiService\";\r\n\r\n// Import Toastify\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst CareerInformation = () => {\r\n  const [isSectionOpen, setIsSectionOpen] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [careerData, setCareerData] = useState([]); // Stores data fetched from the backend\r\n  const [formData, setFormData] = useState({\r\n    company: \"\",\r\n    designation: \"\",\r\n    startYear: \"\",\r\n    endYear: \"\",\r\n  });\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editId, setEditId] = useState(null); // To track editing ID\r\n\r\n  // Fetch Career Data\r\n  const fetchData = async () => {\r\n    try {\r\n      const storedUserData = localStorage.getItem(\"userData\");\r\n      const parsedUserData = storedUserData ? JSON.parse(storedUserData) : null;\r\n      const userId = parsedUserData?.user?.id;\r\n\r\n      if (!userId) {\r\n        toast.error(\"User ID is missing. Please log in again.\");\r\n        return;\r\n      }\r\n\r\n      console.log(\"Fetching career data for userId:\", userId);\r\n\r\n      const response = await fetchCareerData(userId);\r\n\r\n      if (response && response.data) {\r\n        console.log(\"Career data response:\", response.data);\r\n        setCareerData(Array.isArray(response.data) ? response.data : [response.data]);\r\n      } else {\r\n        console.warn(\"No career data found. Setting empty array.\");\r\n        setCareerData([]);\r\n      }\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 404) {\r\n        console.warn(\"No career data found for user. Setting empty array.\");\r\n        setCareerData([]);\r\n      } else {\r\n        console.error(\"Error fetching career data:\", error);\r\n        toast.error(\"Failed to fetch career data. Please try again later.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Fetch career data when component mounts\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Handle Input Change\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // Handle Form Submit\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const storedUserData = localStorage.getItem(\"userData\");\r\n    const parsedUserData = storedUserData ? JSON.parse(storedUserData) : null;\r\n    const userId = parsedUserData?.user?.id;\r\n\r\n    if (!userId) {\r\n      toast.error(\"User ID is missing. Please log in again.\");\r\n      return;\r\n    }\r\n\r\n    const dataToSubmit = { ...formData, userId };\r\n\r\n    try {\r\n      let response;\r\n\r\n      if (isEditing) {\r\n        response = await careerInformationForm({ ...dataToSubmit, id: editId }, \"PUT\");\r\n        setCareerData((prevData) =>\r\n          prevData.map((item) => (item.id === editId ? response.data : item))\r\n        );\r\n      } else {\r\n        response = await careerInformationForm(dataToSubmit, \"POST\");\r\n        setCareerData((prevData) => [...prevData, response.data]);\r\n      }\r\n\r\n      toast.success(\"Career Information submitted successfully!\");\r\n      fetchData(); // Refresh UI after saving\r\n\r\n      // Reset Form\r\n      setFormData({\r\n        company: \"\",\r\n        designation: \"\",\r\n        startYear: \"\",\r\n        endYear: \"\",\r\n      });\r\n      setIsEditing(false);\r\n      setEditId(null);\r\n      setShowAlert(false);\r\n    } catch (error) {\r\n      console.error(\"Error submitting form:\", error);\r\n      toast.error(\"Failed to submit career information.\");\r\n    }\r\n  };\r\n\r\n  // Handle Edit\r\n  const handleEdit = (id) => {\r\n    const itemToEdit = careerData.find((item) => item.id === id);\r\n    if (itemToEdit) {\r\n      setFormData({\r\n        company: itemToEdit?.company || \"\",\r\n        designation: itemToEdit?.designation || \"\",\r\n        startYear: itemToEdit?.startYear || \"\",\r\n        endYear: itemToEdit?.endYear || \"\",\r\n      });\r\n      setIsEditing(true);\r\n      setEditId(id);\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  // Handle Delete\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      await deleteCareerInformation(id);\r\n      setCareerData((prevData) => (Array.isArray(prevData) ? prevData.filter((item) => item.id !== id) : []));\r\n      toast.success(\"Record deleted successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error deleting record:\", error);\r\n      toast.error(\"Failed to delete record.\");\r\n    }\r\n  };\r\n\r\n  // Close Modal\r\n  const handleAlertClose = () => {\r\n    setShowAlert(false);\r\n  };\r\n\r\n  // Toggle Section\r\n  const toggleSection = () => {\r\n    setIsSectionOpen(!isSectionOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"collapsible-section\">\r\n        <div className=\"section-header\" onClick={toggleSection}>\r\n          <h5 className={`section-title ${isSectionOpen ? \"open\" : \"closed\"}`}>Career Information</h5>\r\n          <span>{isSectionOpen ? <i className=\"fa-solid fa-angle-up\"></i> : <i className=\"fa-solid fa-angle-down\"></i>}</span>\r\n        </div>\r\n        {isSectionOpen && (\r\n          <div>\r\n            <button type=\"submit\" className=\"add-new-button\" onClick={() => setShowAlert(true)}>\r\n              <i style={{ marginRight: \"5px\" }} className=\"fa fa-plus\" aria-hidden=\"true\"></i>Add New\r\n            </button>\r\n\r\n            <table className=\"education-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>S.N</th>\r\n                  <th>Company</th>\r\n                  <th>Designation</th>\r\n                  <th>Start Year</th>\r\n                  <th>End Year</th>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {(Array.isArray(careerData) ? careerData : [])\r\n                  .filter((item) => item != null)\r\n                  .map((item, index) => (\r\n                    <tr key={item.id}>\r\n                      <td>{index + 1}</td>\r\n                      <td>{item.company || \"N/A\"}</td>\r\n                      <td>{item.designation || \"N/A\"}</td>\r\n                      <td>{item.startYear || \"N/A\"}</td>\r\n                      <td>{item.endYear || \"N/A\"}</td>\r\n                      <td>\r\n                        <button className=\"action-button edit-button\" onClick={() => handleEdit(item?.id)}>‚úèÔ∏è</button>\r\n                        <button className=\"action-button delete-button\" onClick={() => handleDelete(item?.id)}>üóëÔ∏è</button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n\r\n        {showAlert && (\r\n          <div className=\"confirmation-alert\">\r\n            <div className=\"education-information-dialog\">\r\n              <div className=\"dialog-header\">\r\n                <h4>{isEditing ? \"Edit Career Information\" : \"Add Career Information\"}</h4>\r\n                <button className=\"cross-button\" onClick={handleAlertClose}><i className=\"bi bi-x cross-icon\"></i></button>\r\n              </div>\r\n              <form className=\"education-form\" onSubmit={handleSubmit}>\r\n                <input type=\"text\" name=\"company\" value={formData.company} placeholder=\"Company *\" onChange={handleChange} required />\r\n                <input type=\"text\" name=\"designation\" value={formData.designation} placeholder=\"Designation *\" onChange={handleChange} required />\r\n                <input type=\"date\" name=\"startYear\" value={formData.startYear} onChange={handleChange} required />\r\n                <input type=\"date\" name=\"endYear\" value={formData.endYear} onChange={handleChange} />\r\n                <button type=\"submit\">{isEditing ? \"Update\" : \"Submit\"}</button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CareerInformation;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,iCAAiC;AACxC,OAAO,yBAAyB;AAChC,OAAO,sCAAsC;AAC7C,SACEC,qBAAqB,EACrBC,eAAe,EACfC,uBAAuB,QAClB,2BAA2B;;AAElC;AACA,SAASC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC;IACvCqB,OAAO,EAAE,EAAE;IACXC,WAAW,EAAE,EAAE;IACfC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC2B,MAAM,EAAEC,SAAS,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE5C;EACA,MAAM6B,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MAAA,IAAAC,oBAAA;MACF,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MACvD,MAAMC,cAAc,GAAGH,cAAc,GAAGI,IAAI,CAACC,KAAK,CAACL,cAAc,CAAC,GAAG,IAAI;MACzE,MAAMM,MAAM,GAAGH,cAAc,aAAdA,cAAc,wBAAAJ,oBAAA,GAAdI,cAAc,CAAEI,IAAI,cAAAR,oBAAA,uBAApBA,oBAAA,CAAsBS,EAAE;MAEvC,IAAI,CAACF,MAAM,EAAE;QACX/B,KAAK,CAACkC,KAAK,CAAC,0CAA0C,CAAC;QACvD;MACF;MAEAC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEL,MAAM,CAAC;MAEvD,MAAMM,QAAQ,GAAG,MAAMxC,eAAe,CAACkC,MAAM,CAAC;MAE9C,IAAIM,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE;QAC7BH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEC,QAAQ,CAACC,IAAI,CAAC;QACnD1B,aAAa,CAAC2B,KAAK,CAACC,OAAO,CAACH,QAAQ,CAACC,IAAI,CAAC,GAAGD,QAAQ,CAACC,IAAI,GAAG,CAACD,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC/E,CAAC,MAAM;QACLH,OAAO,CAACM,IAAI,CAAC,4CAA4C,CAAC;QAC1D7B,aAAa,CAAC,EAAE,CAAC;MACnB;IACF,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACd,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;QACnDP,OAAO,CAACM,IAAI,CAAC,qDAAqD,CAAC;QACnE7B,aAAa,CAAC,EAAE,CAAC;MACnB,CAAC,MAAM;QACLuB,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDlC,KAAK,CAACkC,KAAK,CAAC,sDAAsD,CAAC;MACrE;IACF;EACF,CAAC;;EAED;EACAvC,SAAS,CAAC,MAAM;IACd4B,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMoB,YAAY,GAAIC,CAAC,IAAK;IAC1B9B,WAAW,CAAC;MAAE,GAAGD,QAAQ;MAAE,CAAC+B,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAAM,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAOJ,CAAC,IAAK;IAAA,IAAAK,qBAAA;IAChCL,CAAC,CAACM,cAAc,CAAC,CAAC;IAElB,MAAMzB,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,MAAMC,cAAc,GAAGH,cAAc,GAAGI,IAAI,CAACC,KAAK,CAACL,cAAc,CAAC,GAAG,IAAI;IACzE,MAAMM,MAAM,GAAGH,cAAc,aAAdA,cAAc,wBAAAqB,qBAAA,GAAdrB,cAAc,CAAEI,IAAI,cAAAiB,qBAAA,uBAApBA,qBAAA,CAAsBhB,EAAE;IAEvC,IAAI,CAACF,MAAM,EAAE;MACX/B,KAAK,CAACkC,KAAK,CAAC,0CAA0C,CAAC;MACvD;IACF;IAEA,MAAMiB,YAAY,GAAG;MAAE,GAAGtC,QAAQ;MAAEkB;IAAO,CAAC;IAE5C,IAAI;MACF,IAAIM,QAAQ;MAEZ,IAAIlB,SAAS,EAAE;QACbkB,QAAQ,GAAG,MAAMzC,qBAAqB,CAAC;UAAE,GAAGuD,YAAY;UAAElB,EAAE,EAAEZ;QAAO,CAAC,EAAE,KAAK,CAAC;QAC9ET,aAAa,CAAEwC,QAAQ,IACrBA,QAAQ,CAACC,GAAG,CAAEC,IAAI,IAAMA,IAAI,CAACrB,EAAE,KAAKZ,MAAM,GAAGgB,QAAQ,CAACC,IAAI,GAAGgB,IAAK,CACpE,CAAC;MACH,CAAC,MAAM;QACLjB,QAAQ,GAAG,MAAMzC,qBAAqB,CAACuD,YAAY,EAAE,MAAM,CAAC;QAC5DvC,aAAa,CAAEwC,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAEf,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC3D;MAEAtC,KAAK,CAACuD,OAAO,CAAC,4CAA4C,CAAC;MAC3DhC,SAAS,CAAC,CAAC,CAAC,CAAC;;MAEb;MACAT,WAAW,CAAC;QACVC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE,EAAE;QACfC,SAAS,EAAE,EAAE;QACbC,OAAO,EAAE;MACX,CAAC,CAAC;MACFE,YAAY,CAAC,KAAK,CAAC;MACnBE,SAAS,CAAC,IAAI,CAAC;MACfZ,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9ClC,KAAK,CAACkC,KAAK,CAAC,sCAAsC,CAAC;IACrD;EACF,CAAC;;EAED;EACA,MAAMsB,UAAU,GAAIvB,EAAE,IAAK;IACzB,MAAMwB,UAAU,GAAG9C,UAAU,CAAC+C,IAAI,CAAEJ,IAAI,IAAKA,IAAI,CAACrB,EAAE,KAAKA,EAAE,CAAC;IAC5D,IAAIwB,UAAU,EAAE;MACd3C,WAAW,CAAC;QACVC,OAAO,EAAE,CAAA0C,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE1C,OAAO,KAAI,EAAE;QAClCC,WAAW,EAAE,CAAAyC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEzC,WAAW,KAAI,EAAE;QAC1CC,SAAS,EAAE,CAAAwC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAExC,SAAS,KAAI,EAAE;QACtCC,OAAO,EAAE,CAAAuC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEvC,OAAO,KAAI;MAClC,CAAC,CAAC;MACFE,YAAY,CAAC,IAAI,CAAC;MAClBE,SAAS,CAACW,EAAE,CAAC;MACbvB,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAMiD,YAAY,GAAG,MAAO1B,EAAE,IAAK;IACjC,IAAI;MACF,MAAMnC,uBAAuB,CAACmC,EAAE,CAAC;MACjCrB,aAAa,CAAEwC,QAAQ,IAAMb,KAAK,CAACC,OAAO,CAACY,QAAQ,CAAC,GAAGA,QAAQ,CAACQ,MAAM,CAAEN,IAAI,IAAKA,IAAI,CAACrB,EAAE,KAAKA,EAAE,CAAC,GAAG,EAAG,CAAC;MACvGjC,KAAK,CAACuD,OAAO,CAAC,8BAA8B,CAAC;IAC/C,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9ClC,KAAK,CAACkC,KAAK,CAAC,0BAA0B,CAAC;IACzC;EACF,CAAC;;EAED;EACA,MAAM2B,gBAAgB,GAAGA,CAAA,KAAM;IAC7BnD,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;;EAED;EACA,MAAMoD,aAAa,GAAGA,CAAA,KAAM;IAC1BtD,gBAAgB,CAAC,CAACD,aAAa,CAAC;EAClC,CAAC;EAED,oBACEL,OAAA,CAAAE,SAAA;IAAA2D,QAAA,gBACE7D,OAAA;MAAK8D,SAAS,EAAC,qBAAqB;MAAAD,QAAA,gBAClC7D,OAAA;QAAK8D,SAAS,EAAC,gBAAgB;QAACC,OAAO,EAAEH,aAAc;QAAAC,QAAA,gBACrD7D,OAAA;UAAI8D,SAAS,EAAE,iBAAiBzD,aAAa,GAAG,MAAM,GAAG,QAAQ,EAAG;UAAAwD,QAAA,EAAC;QAAkB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5FnE,OAAA;UAAA6D,QAAA,EAAOxD,aAAa,gBAAGL,OAAA;YAAG8D,SAAS,EAAC;UAAsB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,gBAAGnE,OAAA;YAAG8D,SAAS,EAAC;UAAwB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjH,CAAC,EACL9D,aAAa,iBACZL,OAAA;QAAA6D,QAAA,gBACE7D,OAAA;UAAQoE,IAAI,EAAC,QAAQ;UAACN,SAAS,EAAC,gBAAgB;UAACC,OAAO,EAAEA,CAAA,KAAMvD,YAAY,CAAC,IAAI,CAAE;UAAAqD,QAAA,gBACjF7D,OAAA;YAAGqE,KAAK,EAAE;cAAEC,WAAW,EAAE;YAAM,CAAE;YAACR,SAAS,EAAC,YAAY;YAAC,eAAY;UAAM;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,WAClF;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAETnE,OAAA;UAAO8D,SAAS,EAAC,iBAAiB;UAAAD,QAAA,gBAChC7D,OAAA;YAAA6D,QAAA,eACE7D,OAAA;cAAA6D,QAAA,gBACE7D,OAAA;gBAAA6D,QAAA,EAAI;cAAG;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACZnE,OAAA;gBAAA6D,QAAA,EAAI;cAAO;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAChBnE,OAAA;gBAAA6D,QAAA,EAAI;cAAW;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACpBnE,OAAA;gBAAA6D,QAAA,EAAI;cAAU;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACnBnE,OAAA;gBAAA6D,QAAA,EAAI;cAAQ;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACjBnE,OAAA;gBAAA6D,QAAA,EAAI;cAAO;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACd;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACRnE,OAAA;YAAA6D,QAAA,EACG,CAACxB,KAAK,CAACC,OAAO,CAAC7B,UAAU,CAAC,GAAGA,UAAU,GAAG,EAAE,EAC1CiD,MAAM,CAAEN,IAAI,IAAKA,IAAI,IAAI,IAAI,CAAC,CAC9BD,GAAG,CAAC,CAACC,IAAI,EAAEmB,KAAK,kBACfvE,OAAA;cAAA6D,QAAA,gBACE7D,OAAA;gBAAA6D,QAAA,EAAKU,KAAK,GAAG;cAAC;gBAAAP,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACpBnE,OAAA;gBAAA6D,QAAA,EAAKT,IAAI,CAACvC,OAAO,IAAI;cAAK;gBAAAmD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAChCnE,OAAA;gBAAA6D,QAAA,EAAKT,IAAI,CAACtC,WAAW,IAAI;cAAK;gBAAAkD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACpCnE,OAAA;gBAAA6D,QAAA,EAAKT,IAAI,CAACrC,SAAS,IAAI;cAAK;gBAAAiD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAClCnE,OAAA;gBAAA6D,QAAA,EAAKT,IAAI,CAACpC,OAAO,IAAI;cAAK;gBAAAgD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAChCnE,OAAA;gBAAA6D,QAAA,gBACE7D,OAAA;kBAAQ8D,SAAS,EAAC,2BAA2B;kBAACC,OAAO,EAAEA,CAAA,KAAMT,UAAU,CAACF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAErB,EAAE,CAAE;kBAAA8B,QAAA,EAAC;gBAAE;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eAC9FnE,OAAA;kBAAQ8D,SAAS,EAAC,6BAA6B;kBAACC,OAAO,EAAEA,CAAA,KAAMN,YAAY,CAACL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAErB,EAAE,CAAE;kBAAA8B,QAAA,EAAC;gBAAG;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjG,CAAC;YAAA,GATEf,IAAI,CAACrB,EAAE;cAAAiC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAUZ,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACN,EAEA5D,SAAS,iBACRP,OAAA;QAAK8D,SAAS,EAAC,oBAAoB;QAAAD,QAAA,eACjC7D,OAAA;UAAK8D,SAAS,EAAC,8BAA8B;UAAAD,QAAA,gBAC3C7D,OAAA;YAAK8D,SAAS,EAAC,eAAe;YAAAD,QAAA,gBAC5B7D,OAAA;cAAA6D,QAAA,EAAK5C,SAAS,GAAG,yBAAyB,GAAG;YAAwB;cAAA+C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC3EnE,OAAA;cAAQ8D,SAAS,EAAC,cAAc;cAACC,OAAO,EAAEJ,gBAAiB;cAAAE,QAAA,eAAC7D,OAAA;gBAAG8D,SAAS,EAAC;cAAoB;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxG,CAAC,eACNnE,OAAA;YAAM8D,SAAS,EAAC,gBAAgB;YAACU,QAAQ,EAAE1B,YAAa;YAAAe,QAAA,gBACtD7D,OAAA;cAAOoE,IAAI,EAAC,MAAM;cAACxB,IAAI,EAAC,SAAS;cAACC,KAAK,EAAElC,QAAQ,CAACE,OAAQ;cAAC4D,WAAW,EAAC,WAAW;cAACC,QAAQ,EAAEjC,YAAa;cAACkC,QAAQ;YAAA;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACtHnE,OAAA;cAAOoE,IAAI,EAAC,MAAM;cAACxB,IAAI,EAAC,aAAa;cAACC,KAAK,EAAElC,QAAQ,CAACG,WAAY;cAAC2D,WAAW,EAAC,eAAe;cAACC,QAAQ,EAAEjC,YAAa;cAACkC,QAAQ;YAAA;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAClInE,OAAA;cAAOoE,IAAI,EAAC,MAAM;cAACxB,IAAI,EAAC,WAAW;cAACC,KAAK,EAAElC,QAAQ,CAACI,SAAU;cAAC2D,QAAQ,EAAEjC,YAAa;cAACkC,QAAQ;YAAA;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAClGnE,OAAA;cAAOoE,IAAI,EAAC,MAAM;cAACxB,IAAI,EAAC,SAAS;cAACC,KAAK,EAAElC,QAAQ,CAACK,OAAQ;cAAC0D,QAAQ,EAAEjC;YAAa;cAAAuB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACrFnE,OAAA;cAAQoE,IAAI,EAAC,QAAQ;cAAAP,QAAA,EAAE5C,SAAS,GAAG,QAAQ,GAAG;YAAQ;cAAA+C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAS,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5D,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACNnE,OAAA,CAACH,cAAc;MAAAmE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAClB,CAAC;AAEP,CAAC;AAAC/D,EAAA,CAhNID,iBAAiB;AAAAyE,EAAA,GAAjBzE,iBAAiB;AAkNvB,eAAeA,iBAAiB;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}