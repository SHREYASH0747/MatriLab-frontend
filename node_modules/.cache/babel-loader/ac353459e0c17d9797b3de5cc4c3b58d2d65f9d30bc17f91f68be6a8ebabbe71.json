{"ast":null,"code":"var _jsxFileName = \"E:\\\\MatriLab-frontend\\\\src\\\\screens\\\\user\\\\PhysicalAttributes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { postPhysicalAttributes, updatePhysicalAttributes, fetchPhysicalAttributesData } from \"../../services/ApiService\";\nimport \"../../styles/user/dashboard.css\";\nimport \"../../styles/styles.css\";\nimport \"../../styles/user/profileSetting.css\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PhysicalAttributes = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false); // Manage collapsible section\n  const [formData, setFormData] = useState({\n    complexion: \"\",\n    height: \"\",\n    weight: \"\",\n    religion: \"\",\n    eyeColor: \"\",\n    hairColor: \"\",\n    disability: \"\"\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  const [editId, setEditId] = useState(null); // To track editing ID\n\n  const navigate = useNavigate();\n  const fetchPhysicalData = async userId => {\n    try {\n      const response = await fetchPhysicalAttributesData(userId);\n      console.log(\"Fetched Physical Attributes Data:\", response); // Debugging\n\n      if (response && Object.keys(response).length > 0) {\n        setFormData({\n          complexion: response.complexion || \"\",\n          height: response.height || \"\",\n          weight: response.weight || \"\",\n          religion: response.religion || \"\",\n          eyeColor: response.eyeColor || \"\",\n          hairColor: response.hairColor || \"\",\n          disability: response.disability || \"\"\n        });\n        setIsEditing(true);\n        setEditId(response.id);\n      } else {\n        console.log(\"No physical attributes found for user, setting empty form.\");\n        setFormData({\n          complexion: \"\",\n          height: \"\",\n          weight: \"\",\n          religion: \"\",\n          eyeColor: \"\",\n          hairColor: \"\",\n          disability: \"\"\n        });\n        setIsEditing(false);\n      }\n    } catch (error) {\n      console.error(\"Error fetching physical attributes:\", error);\n      // Show toast only if it's an unexpected error\n      if (error.response && error.response.status !== 404) {\n        toast.error(\"Error fetching physical attributes.\");\n      }\n    }\n  };\n\n  // useEffect(() => {\n  //   // Retrieve the stored user data from localStorage\n  //   const storedUserData = localStorage.getItem(\"userData\");\n  //   if (storedUserData) {\n  //     const parsedUserData = JSON.parse(storedUserData);\n  //     const userId = parsedUserData.user.id;\n\n  //     // Fetch physical data if available\n  //     const fetchPhysicalData = async () => {\n  //       try {\n  //         const response = await fetchPhysicalAttributesData(userId); // Fetch data from the API\n  //         if (response && response.data && response.data.length > 0) {\n  //           const latestPhysicalData = response.data[0]; // Assuming the data is an array, take the first item\n  //           setFormData({\n  //             complexion: latestPhysicalData.complexion || \"\",\n  //             height: latestPhysicalData.height || \"\",\n  //             weight: latestPhysicalData.weight || \"\",\n  //             religion: latestPhysicalData.religion || \"\",\n  //             eyeColor: latestPhysicalData.eyeColor || \"\",\n  //             hairColor: latestPhysicalData.hairColor || \"\",\n  //             disability: latestPhysicalData.disability || \"\",\n  //           });\n  //           setIsEditing(true);\n  //           setEditId(latestPhysicalData.id); // Set ID for update\n  //         }\n  //       } catch (error) {\n  //         console.error(\"Error fetching physical attributes:\", error);\n  //         toast.error(\"Error fetching physical attributes.\");\n  //       }\n  //     };\n\n  //     fetchPhysicalData();\n  //   } else {\n  //     // Redirect to login if no user data is found\n  //     navigate(\"/matrilab/login\");\n  //   }\n  // }, [navigate]);\n\n  // Handle input changes\n\n  useEffect(() => {\n    const storedUserData = localStorage.getItem(\"userData\");\n    if (storedUserData) {\n      const parsedUserData = JSON.parse(storedUserData);\n      const userId = parsedUserData.user.id;\n      console.log(\"meri id ky hai\", userId);\n      if (userId) {\n        console.log(\"Fetching data for user ID:\", userId); // Debugging\n        fetchPhysicalData(userId);\n      }\n    } else {\n      navigate(\"/matrilab/login\"); // Redirect if no user data found\n    }\n  }, [navigate]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      [name]: value\n    }));\n  };\n\n  // Handle form submission (POST or PUT)\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n\n    // Ensure user ID is available\n    const storedUserData = localStorage.getItem(\"userData\");\n    const userId = storedUserData ? JSON.parse(storedUserData).user.id : null;\n    if (!userId) {\n      toast.error(\"User ID is missing. Please log in again.\");\n      return;\n    }\n    const dataToSubmit = {\n      ...formData,\n      userId\n    }; // Include userId in the form data\n\n    try {\n      let response;\n      if (isEditing) {\n        // When editing, update the existing record (PUT)\n        response = await updatePhysicalAttributes(editId, dataToSubmit);\n        toast.success(\"Physical Attributes updated successfully!\");\n      } else {\n        // When creating new, post the data (POST)\n        response = await postPhysicalAttributes(dataToSubmit);\n        toast.success(\"Physical Attributes added successfully!\");\n      }\n      setTimeout(() => fetchPhysicalData(userId), 500);\n\n      // Reset the form after submission\n      setFormData({\n        complexion: \"\",\n        height: \"\",\n        weight: \"\",\n        religion: \"\",\n        eyeColor: \"\",\n        hairColor: \"\",\n        disability: \"\"\n      });\n      setIsEditing(false);\n      setEditId(null); // Reset edit ID\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n      toast.error(\"Failed to submit physical attributes.\");\n    }\n  };\n\n  // Toggle the collapsible section\n  const toggleSection = () => {\n    setIsOpen(prevIsOpen => !prevIsOpen);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"collapsible-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-header\",\n        onClick: toggleSection,\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: `section-title ${isOpen ? \"open\" : \"closed\"}`,\n          children: \"Physical Attributes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: isOpen ? /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angle-up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angle-down\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"basic-information-form\",\n        onSubmit: handleFormSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section personal-details\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Complexion*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"complexion\",\n              value: formData.complexion,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section personal-details\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Height*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"height\",\n              value: formData.height,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section personal-details\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Weight*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"weight\",\n              value: formData.weight,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section personal-details\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Religion*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"property-select\",\n              name: \"religion\",\n              value: formData.religion,\n              onChange: handleInputChange,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Religion\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Hindu\",\n                children: \"Hindu\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Muslim\",\n                children: \"Muslim\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Christian\",\n                children: \"Christian\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Other\",\n                children: \"Other\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section personal-details\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Eye Color*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"eyeColor\",\n              value: formData.eyeColor,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section personal-details\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Hair Color*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"hairColor\",\n              value: formData.hairColor,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section personal-details\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Disability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"disability\",\n              value: formData.disability,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn-submit\",\n            children: isEditing ? \"Update\" : \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(PhysicalAttributes, \"JIEkxqbunntOfCnLlvoLVtu8e2c=\", false, function () {\n  return [useNavigate];\n});\n_c = PhysicalAttributes;\nexport default PhysicalAttributes;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import {postPhysicalAttributes, updatePhysicalAttributes, fetchPhysicalAttributesData} from \"../../services/ApiService\"; // Import post function\n// // import updatePhysicalAttributes from \"../../services/updatePhysicalAttributes\"; // Import update function\n// // import fetchPhysicalAttributesData from \"../../services/fetchPhysicalAttributes\"; // Import fetch function\n// import \"../../styles/user/dashboard.css\";\n// import \"../../styles/styles.css\";\n// import \"../../styles/user/profileSetting.css\";\n// import { toast, ToastContainer } from \"react-toastify\";\n// import \"react-toastify/dist/ReactToastify.css\";\n\n// const PhysicalAttributes = () => {\n//   const [formData, setFormData] = useState({\n//     complexion: \"\",\n//     height: \"\",\n//     weight: \"\",\n//     religion: \"\",\n//     eyeColor: \"\",\n//     hairColor: \"\",\n//     disability: \"\",\n//   });\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [editId, setEditId] = useState(null); // To track editing ID\n\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     // Retrieve the stored user data from localStorage\n//     const storedUserData = localStorage.getItem(\"userData\");\n//     if (storedUserData) {\n//       const parsedUserData = JSON.parse(storedUserData);\n//       const userId = parsedUserData.user.id;\n\n//       // Fetch physical data if available\n//       const fetchPhysicalData = async () => {\n//         try {\n//           const response = await fetchPhysicalAttributesData(userId); // Fetch data from the API\n//           if (response && response.data && response.data.length > 0) {\n//             const latestPhysicalData = response.data[0]; // Assuming the data is an array, take the first item\n//             setFormData({\n//               complexion: latestPhysicalData.complexion || \"\",\n//               height: latestPhysicalData.height || \"\",\n//               weight: latestPhysicalData.weight || \"\",\n//               religion: latestPhysicalData.religion || \"\",\n//               eyeColor: latestPhysicalData.eyeColor || \"\",\n//               hairColor: latestPhysicalData.hairColor || \"\",\n//               disability: latestPhysicalData.disability || \"\",\n//             });\n//             setIsEditing(true);\n//             setEditId(latestPhysicalData.id); // Set ID for update\n//           }\n//         } catch (error) {\n//           console.error(\"Error fetching physical attributes:\", error);\n//           toast.error(\"Error fetching physical attributes.\");\n//         }\n//       };\n\n//       fetchPhysicalData();\n//     } else {\n//       // Redirect to login if no user data is found\n//       navigate(\"/matrilab/login\");\n//     }\n//   }, [navigate]);\n\n//   // Handle input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevFormData) => ({\n//       ...prevFormData,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle form submission (POST or PUT)\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Ensure user ID is available\n//     const storedUserData = localStorage.getItem(\"userData\");\n//     const userId = storedUserData ? JSON.parse(storedUserData).user.id : null;\n\n//     if (!userId) {\n//       toast.error(\"User ID is missing. Please log in again.\");\n//       return;\n//     }\n\n//     const dataToSubmit = { ...formData, userId }; // Include userId in the form data\n\n//     try {\n//       let response;\n\n//       if (isEditing) {\n//         // When editing, update the existing record (PUT)\n//         response = await updatePhysicalAttributes(editId, dataToSubmit);\n//         toast.success(\"Physical Attributes updated successfully!\");\n//       } else {\n//         // When creating new, post the data (POST)\n//         response = await postPhysicalAttributes(dataToSubmit);\n//         toast.success(\"Physical Attributes added successfully!\");\n//       }\n\n//       // Reset the form after submission\n//       setFormData({\n//         complexion: \"\",\n//         height: \"\",\n//         weight: \"\",\n//         religion: \"\",\n//         eyeColor: \"\",\n//         hairColor: \"\",\n//         disability: \"\",\n//       });\n\n//       setIsEditing(false);\n//       setEditId(null); // Reset edit ID\n\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//       toast.error(\"Failed to submit physical attributes.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"physical-attributes-container\">\n//       {/* Form for adding or editing physical attributes */}\n//       <form onSubmit={handleFormSubmit}>\n//         <div>\n//           <label>Complexion</label>\n//           <input\n//             type=\"text\"\n//             name=\"complexion\"\n//             value={formData.complexion}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n//         <div>\n//           <label>Height</label>\n//           <input\n//             type=\"text\"\n//             name=\"height\"\n//             value={formData.height}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n//         <div>\n//           <label>Weight</label>\n//           <input\n//             type=\"text\"\n//             name=\"weight\"\n//             value={formData.weight}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n//         <div>\n//           <label>Religion</label>\n//           <input\n//             type=\"text\"\n//             name=\"religion\"\n//             value={formData.religion}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n//         <div>\n//           <label>Eye Color</label>\n//           <input\n//             type=\"text\"\n//             name=\"eyeColor\"\n//             value={formData.eyeColor}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n//         <div>\n//           <label>Hair Color</label>\n//           <input\n//             type=\"text\"\n//             name=\"hairColor\"\n//             value={formData.hairColor}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n//         <div>\n//           <label>Disability</label>\n//           <input\n//             type=\"text\"\n//             name=\"disability\"\n//             value={formData.disability}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n\n//         <button type=\"submit\">\n//           {isEditing ? \"Update\" : \"Add\"} Physical Attributes\n//         </button>\n//       </form>\n\n//       <ToastContainer />\n//     </div>\n//   );\n// };\n\n// export default PhysicalAttributes;\nvar _c;\n$RefreshReg$(_c, \"PhysicalAttributes\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","postPhysicalAttributes","updatePhysicalAttributes","fetchPhysicalAttributesData","toast","ToastContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","PhysicalAttributes","_s","isOpen","setIsOpen","formData","setFormData","complexion","height","weight","religion","eyeColor","hairColor","disability","isEditing","setIsEditing","editId","setEditId","navigate","fetchPhysicalData","userId","response","console","log","Object","keys","length","id","error","status","storedUserData","localStorage","getItem","parsedUserData","JSON","parse","user","handleInputChange","e","name","value","target","prevFormData","handleFormSubmit","preventDefault","dataToSubmit","success","setTimeout","toggleSection","prevIsOpen","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","required","_c","$RefreshReg$"],"sources":["E:/MatriLab-frontend/src/screens/user/PhysicalAttributes.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {postPhysicalAttributes, updatePhysicalAttributes, fetchPhysicalAttributesData} from \"../../services/ApiService\";\r\nimport \"../../styles/user/dashboard.css\";\r\nimport \"../../styles/styles.css\";\r\nimport \"../../styles/user/profileSetting.css\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst PhysicalAttributes = () => {\r\n  const [isOpen, setIsOpen] = useState(false); // Manage collapsible section\r\n  const [formData, setFormData] = useState({\r\n    complexion: \"\",\r\n    height: \"\",\r\n    weight: \"\",\r\n    religion: \"\",\r\n    eyeColor: \"\",\r\n    hairColor: \"\",\r\n    disability: \"\",\r\n  });\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editId, setEditId] = useState(null); // To track editing ID\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const fetchPhysicalData = async (userId) => {\r\n    try {\r\n      const response = await fetchPhysicalAttributesData(userId); \r\n      console.log(\"Fetched Physical Attributes Data:\", response); // Debugging\r\n  \r\n      if (response && Object.keys(response).length > 0) {\r\n        setFormData({\r\n          complexion: response.complexion || \"\",\r\n          height: response.height || \"\",\r\n          weight: response.weight || \"\",\r\n          religion: response.religion || \"\",\r\n          eyeColor: response.eyeColor || \"\",\r\n          hairColor: response.hairColor || \"\",\r\n          disability: response.disability || \"\",\r\n        });\r\n        setIsEditing(true);\r\n        setEditId(response.id); \r\n      } else {\r\n        console.log(\"No physical attributes found for user, setting empty form.\");\r\n        setFormData({\r\n          complexion: \"\",\r\n          height: \"\",\r\n          weight: \"\",\r\n          religion: \"\",\r\n          eyeColor: \"\",\r\n          hairColor: \"\",\r\n          disability: \"\",\r\n        });\r\n        setIsEditing(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching physical attributes:\", error);\r\n      // Show toast only if it's an unexpected error\r\n      if (error.response && error.response.status !== 404) {\r\n        toast.error(\"Error fetching physical attributes.\");\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  // useEffect(() => {\r\n  //   // Retrieve the stored user data from localStorage\r\n  //   const storedUserData = localStorage.getItem(\"userData\");\r\n  //   if (storedUserData) {\r\n  //     const parsedUserData = JSON.parse(storedUserData);\r\n  //     const userId = parsedUserData.user.id;\r\n\r\n  //     // Fetch physical data if available\r\n  //     const fetchPhysicalData = async () => {\r\n  //       try {\r\n  //         const response = await fetchPhysicalAttributesData(userId); // Fetch data from the API\r\n  //         if (response && response.data && response.data.length > 0) {\r\n  //           const latestPhysicalData = response.data[0]; // Assuming the data is an array, take the first item\r\n  //           setFormData({\r\n  //             complexion: latestPhysicalData.complexion || \"\",\r\n  //             height: latestPhysicalData.height || \"\",\r\n  //             weight: latestPhysicalData.weight || \"\",\r\n  //             religion: latestPhysicalData.religion || \"\",\r\n  //             eyeColor: latestPhysicalData.eyeColor || \"\",\r\n  //             hairColor: latestPhysicalData.hairColor || \"\",\r\n  //             disability: latestPhysicalData.disability || \"\",\r\n  //           });\r\n  //           setIsEditing(true);\r\n  //           setEditId(latestPhysicalData.id); // Set ID for update\r\n  //         }\r\n  //       } catch (error) {\r\n  //         console.error(\"Error fetching physical attributes:\", error);\r\n  //         toast.error(\"Error fetching physical attributes.\");\r\n  //       }\r\n  //     };\r\n\r\n  //     fetchPhysicalData();\r\n  //   } else {\r\n  //     // Redirect to login if no user data is found\r\n  //     navigate(\"/matrilab/login\");\r\n  //   }\r\n  // }, [navigate]);\r\n\r\n  // Handle input changes\r\n  \r\n\r\n  useEffect(() => {\r\n    const storedUserData = localStorage.getItem(\"userData\");\r\n    if (storedUserData) {\r\n      const parsedUserData = JSON.parse(storedUserData);\r\n      const userId = parsedUserData.user.id;\r\n      console.log(\"meri id ky hai\", userId);\r\n\r\n      if (userId) {\r\n        console.log(\"Fetching data for user ID:\", userId); // Debugging\r\n        fetchPhysicalData(userId);\r\n      }\r\n    } else {\r\n      navigate(\"/matrilab/login\"); // Redirect if no user data found\r\n    }\r\n  }, [navigate]);  \r\n  \r\n  \r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevFormData) => ({\r\n      ...prevFormData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  // Handle form submission (POST or PUT)\r\n  const handleFormSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Ensure user ID is available\r\n    const storedUserData = localStorage.getItem(\"userData\");\r\n    const userId = storedUserData ? JSON.parse(storedUserData).user.id : null;\r\n\r\n    if (!userId) {\r\n      toast.error(\"User ID is missing. Please log in again.\");\r\n      return;\r\n    }\r\n\r\n    const dataToSubmit = { ...formData, userId }; // Include userId in the form data\r\n\r\n    try {\r\n      let response;\r\n      if (isEditing) {\r\n        // When editing, update the existing record (PUT)\r\n        response = await updatePhysicalAttributes(editId, dataToSubmit);\r\n        toast.success(\"Physical Attributes updated successfully!\");\r\n      } else {\r\n        // When creating new, post the data (POST)\r\n        response = await postPhysicalAttributes(dataToSubmit);\r\n        toast.success(\"Physical Attributes added successfully!\");\r\n      }\r\n\r\n      setTimeout(() => fetchPhysicalData(userId), 500);\r\n\r\n      // Reset the form after submission\r\n      setFormData({\r\n        complexion: \"\",\r\n        height: \"\",\r\n        weight: \"\",\r\n        religion: \"\",\r\n        eyeColor: \"\",\r\n        hairColor: \"\",\r\n        disability: \"\",\r\n      });\r\n\r\n      setIsEditing(false);\r\n      setEditId(null); // Reset edit ID\r\n\r\n    } catch (error) {\r\n      console.error(\"Error submitting form:\", error);\r\n      toast.error(\"Failed to submit physical attributes.\");\r\n    }\r\n  };\r\n\r\n\r\n  // Toggle the collapsible section\r\n  const toggleSection = () => {\r\n    setIsOpen((prevIsOpen) => !prevIsOpen);\r\n  };\r\n\r\n \r\n  return (\r\n    <>\r\n      <div className=\"collapsible-section\">\r\n        {/* Collapsible Header */}\r\n        <div className=\"section-header\" onClick={toggleSection}>\r\n          <h5 className={`section-title ${isOpen ? \"open\" : \"closed\"}`}>\r\n            Physical Attributes\r\n          </h5>\r\n          <span>\r\n            {isOpen ? (\r\n              <i className=\"fa-solid fa-angle-up\"></i>\r\n            ) : (\r\n              <i className=\"fa-solid fa-angle-down\"></i>\r\n            )}\r\n          </span>\r\n        </div>\r\n\r\n        {/* Collapsible Content */}\r\n        {isOpen && (\r\n          <form className=\"basic-information-form\" onSubmit={handleFormSubmit}>\r\n            <div className=\"section personal-details\">\r\n              <div className=\"form-group\">\r\n                <label>Complexion*</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"complexion\"\r\n                  value={formData.complexion}\r\n                  onChange={handleInputChange}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"section personal-details\">\r\n              <div className=\"form-group\">\r\n                <label>Height*</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"height\"\r\n                  value={formData.height}\r\n                  onChange={handleInputChange}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"section personal-details\">\r\n              <div className=\"form-group\">\r\n                <label>Weight*</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"weight\"\r\n                  value={formData.weight}\r\n                  onChange={handleInputChange}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"section personal-details\">\r\n              <div className=\"form-group\">\r\n                <label>Religion*</label>\r\n                <select\r\n                  className=\"property-select\"\r\n                  name=\"religion\"\r\n                  value={formData.religion}\r\n                  onChange={handleInputChange}\r\n                  required\r\n                >\r\n                  <option value=\"\">Select Religion</option>\r\n                  <option value=\"Hindu\">Hindu</option>\r\n                  <option value=\"Muslim\">Muslim</option>\r\n                  <option value=\"Christian\">Christian</option>\r\n                  <option value=\"Other\">Other</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"section personal-details\">\r\n              <div className=\"form-group\">\r\n                <label>Eye Color*</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"eyeColor\"\r\n                  value={formData.eyeColor}\r\n                  onChange={handleInputChange}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"section personal-details\">\r\n              <div className=\"form-group\">\r\n                <label>Hair Color*</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"hairColor\"\r\n                  value={formData.hairColor}\r\n                  onChange={handleInputChange}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"section personal-details\">\r\n              <div className=\"form-group\">\r\n                <label>Disability</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"disability\"\r\n                  value={formData.disability}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-actions\">\r\n              <button type=\"submit\" className=\"btn-submit\">\r\n                {isEditing ? \"Update\" : \"Submit\"}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </div>\r\n\r\n      {/* Toast Notifications */}\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PhysicalAttributes;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import {postPhysicalAttributes, updatePhysicalAttributes, fetchPhysicalAttributesData} from \"../../services/ApiService\"; // Import post function\r\n// // import updatePhysicalAttributes from \"../../services/updatePhysicalAttributes\"; // Import update function\r\n// // import fetchPhysicalAttributesData from \"../../services/fetchPhysicalAttributes\"; // Import fetch function\r\n// import \"../../styles/user/dashboard.css\";\r\n// import \"../../styles/styles.css\";\r\n// import \"../../styles/user/profileSetting.css\";\r\n// import { toast, ToastContainer } from \"react-toastify\";\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// const PhysicalAttributes = () => {\r\n//   const [formData, setFormData] = useState({\r\n//     complexion: \"\",\r\n//     height: \"\",\r\n//     weight: \"\",\r\n//     religion: \"\",\r\n//     eyeColor: \"\",\r\n//     hairColor: \"\",\r\n//     disability: \"\",\r\n//   });\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [editId, setEditId] = useState(null); // To track editing ID\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     // Retrieve the stored user data from localStorage\r\n//     const storedUserData = localStorage.getItem(\"userData\");\r\n//     if (storedUserData) {\r\n//       const parsedUserData = JSON.parse(storedUserData);\r\n//       const userId = parsedUserData.user.id;\r\n\r\n//       // Fetch physical data if available\r\n//       const fetchPhysicalData = async () => {\r\n//         try {\r\n//           const response = await fetchPhysicalAttributesData(userId); // Fetch data from the API\r\n//           if (response && response.data && response.data.length > 0) {\r\n//             const latestPhysicalData = response.data[0]; // Assuming the data is an array, take the first item\r\n//             setFormData({\r\n//               complexion: latestPhysicalData.complexion || \"\",\r\n//               height: latestPhysicalData.height || \"\",\r\n//               weight: latestPhysicalData.weight || \"\",\r\n//               religion: latestPhysicalData.religion || \"\",\r\n//               eyeColor: latestPhysicalData.eyeColor || \"\",\r\n//               hairColor: latestPhysicalData.hairColor || \"\",\r\n//               disability: latestPhysicalData.disability || \"\",\r\n//             });\r\n//             setIsEditing(true);\r\n//             setEditId(latestPhysicalData.id); // Set ID for update\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"Error fetching physical attributes:\", error);\r\n//           toast.error(\"Error fetching physical attributes.\");\r\n//         }\r\n//       };\r\n\r\n//       fetchPhysicalData();\r\n//     } else {\r\n//       // Redirect to login if no user data is found\r\n//       navigate(\"/matrilab/login\");\r\n//     }\r\n//   }, [navigate]);\r\n\r\n//   // Handle input changes\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData((prevFormData) => ({\r\n//       ...prevFormData,\r\n//       [name]: value,\r\n//     }));\r\n//   };\r\n\r\n//   // Handle form submission (POST or PUT)\r\n//   const handleFormSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     // Ensure user ID is available\r\n//     const storedUserData = localStorage.getItem(\"userData\");\r\n//     const userId = storedUserData ? JSON.parse(storedUserData).user.id : null;\r\n\r\n//     if (!userId) {\r\n//       toast.error(\"User ID is missing. Please log in again.\");\r\n//       return;\r\n//     }\r\n\r\n//     const dataToSubmit = { ...formData, userId }; // Include userId in the form data\r\n\r\n//     try {\r\n//       let response;\r\n\r\n//       if (isEditing) {\r\n//         // When editing, update the existing record (PUT)\r\n//         response = await updatePhysicalAttributes(editId, dataToSubmit);\r\n//         toast.success(\"Physical Attributes updated successfully!\");\r\n//       } else {\r\n//         // When creating new, post the data (POST)\r\n//         response = await postPhysicalAttributes(dataToSubmit);\r\n//         toast.success(\"Physical Attributes added successfully!\");\r\n//       }\r\n\r\n//       // Reset the form after submission\r\n//       setFormData({\r\n//         complexion: \"\",\r\n//         height: \"\",\r\n//         weight: \"\",\r\n//         religion: \"\",\r\n//         eyeColor: \"\",\r\n//         hairColor: \"\",\r\n//         disability: \"\",\r\n//       });\r\n\r\n//       setIsEditing(false);\r\n//       setEditId(null); // Reset edit ID\r\n\r\n//     } catch (error) {\r\n//       console.error(\"Error submitting form:\", error);\r\n//       toast.error(\"Failed to submit physical attributes.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"physical-attributes-container\">\r\n//       {/* Form for adding or editing physical attributes */}\r\n//       <form onSubmit={handleFormSubmit}>\r\n//         <div>\r\n//           <label>Complexion</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"complexion\"\r\n//             value={formData.complexion}\r\n//             onChange={handleInputChange}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label>Height</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"height\"\r\n//             value={formData.height}\r\n//             onChange={handleInputChange}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label>Weight</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"weight\"\r\n//             value={formData.weight}\r\n//             onChange={handleInputChange}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label>Religion</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"religion\"\r\n//             value={formData.religion}\r\n//             onChange={handleInputChange}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label>Eye Color</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"eyeColor\"\r\n//             value={formData.eyeColor}\r\n//             onChange={handleInputChange}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label>Hair Color</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"hairColor\"\r\n//             value={formData.hairColor}\r\n//             onChange={handleInputChange}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label>Disability</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"disability\"\r\n//             value={formData.disability}\r\n//             onChange={handleInputChange}\r\n//           />\r\n//         </div>\r\n\r\n//         <button type=\"submit\">\r\n//           {isEditing ? \"Update\" : \"Add\"} Physical Attributes\r\n//         </button>\r\n//       </form>\r\n\r\n//       <ToastContainer />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PhysicalAttributes;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}